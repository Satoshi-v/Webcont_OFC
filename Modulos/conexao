#!/bin/bash
#====================================================
#	@TURBONET2023 
#====================================================
cor1='\033[41;1;37m'
cor2='\033[44;1;37m'
scor='\033[0m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
SCOLOR='\033[0m'
[[ $(awk -F" " '{print $2}' /usr/lib/licence) == '@KIRITO_SSH' ]] && {
	ram1=$(free -h | grep -i mem | awk {'print $2'})
	ram2=$(free -h | grep -i mem | awk {'print $4'})
	ram3=$(free -h | grep -i mem | awk {'print $3'})
	uso=$(top -bn1 | awk '/Cpu/ { cpu = "" 100 - $8 "%" }; END { print cpu }')
	system=$(cat /etc/issue.net)
	fun_bar() {
		comando[0]="$1"
		comando[1]="$2"
		(
			[[ -e $HOME/fim ]] && rm $HOME/fim
			[[ ! -d /etc/SSHPlus ]] && rm -rf /bin/menu
			${comando[0]} >/dev/null 2>&1
			${comando[1]} >/dev/null 2>&1
			touch $HOME/fim
		) >/dev/null 2>&1 &
		tput civis
		echo -ne "\033[1;33mAGUARDE \033[1;37m- \033[1;33m["
		while true; do
			for ((i = 0; i < 18; i++)); do
				echo -ne "\033[1;31m#"
				sleep 0.1s
			done
			[[ -e $HOME/fim ]] && rm $HOME/fim && break
			echo -e "\033[1;33m]"
			sleep 1s
			tput cuu1
			tput dl1
			echo -ne "\033[1;33mAGUARDE \033[1;37m- \033[1;33m["
		done
		echo -e "\033[1;33m]\033[1;37m -\033[1;32m OK !\033[1;37m"
		tput cnorm
	}

	verif_ptrs() {
		porta=$1
		PT=$(lsof -V -i tcp -P -n | grep -v "ESTABLISHED" | grep -v "COMMAND" | grep "LISTEN")
		for pton in $(echo -e "$PT" | cut -d: -f2 | cut -d' ' -f1 | uniq); do
			svcs=$(echo -e "$PT" | grep -w "$pton" | awk '{print $1}' | uniq)
			[[ "$porta" = "$pton" ]] && {
				echo -e "\n\033[1;31mPUERTO \033[1;33m$porta \033[1;31mEN USO POR \033[1;37m$svcs\033[0m"
				sleep 3
				fun_conexao
			}
		done
	}

	slow_setup() {
		[[ -e "/bin/slowdns" ]] && {
			slowdns
		} || {
			cd $HOME
			rm -rf install; apt update; wget https://github.com/powermx/dnstt/raw/main/install; chmod 777 install; ./install --start
		}

	}

	inst_sqd() {
		if netstat -nltp | grep 'squid' 1>/dev/null 2>/dev/null; then
			echo -e "\E[41;1;37m            REMOVER SQUID PROXY              \E[0m"
			echo ""
			echo -ne "\033[1;32mREALMENTE DESEA REMOVER EL SQUID \033[1;31m? \033[1;33m[s/n]:\033[1;37m "
			read resp
			[[ "$resp" = 's' ]] && {
				echo -e "\n\033[1;32mREMOVIENDO EL SQUID PROXY !\033[0m"
				echo ""
				rem_sqd() {
					[[ -d "/etc/squid" ]] && {
						apt-get remove squid -y >/dev/null 2>&1
						apt-get purge squid -y >/dev/null 2>&1
						rm -rf /etc/squid >/dev/null 2>&1
					}
					[[ -d "/etc/squid3" ]] && {
						apt-get remove squid3 -y >/dev/null 2>&1
						apt-get purge squid3 -y >/dev/null 2>&1
						rm -rf /etc/squid3 >/dev/null 2>&1
						apt autoremove -y >/dev/null 2>&1
					}
				}
				fun_bar 'rem_sqd'
				echo -e "\n\033[1;32mSQUID REMOVIDO CON ÉXITO !\033[0m"
				sleep 2
				clear
				fun_conexao
			} || {
				echo -e "\n\033[1;31mRetornando...\033[0m"
				sleep 2
				clear
				fun_conexao
			}
		else
			clear
			echo -e "\E[44;1;37m              INSTALADOR SQUID                \E[0m"
			echo ""
			IP=$(wget -qO- ipv4.icanhazip.com)
			echo -ne "\033[1;32mPARA CONTINUAR CONFIRME SU IP: \033[1;37m"
			read -e -i $IP ipdovps
			[[ -z "$ipdovps" ]] && {
				echo -e "\n\033[1;31mIP invalido\033[1;32m"
				echo ""
				read -p "Digite su IP: " IP
			}
			echo -e "\n\033[1;33mQUE PUERTO DESEA ULTILIZAR EN SQUID \033[1;31m?"
			echo -e "\n\033[1;33m[\033[1;31m!\033[1;33m] \033[1;32mDEFINA LOS PUERTOS EN SECUENCIA \033[1;33mEJ: \033[1;37m80 8080"
			echo ""
			echo -ne "\033[1;32mINGRESE LOS PUERTOS\033[1;37m: "
			read portass
			[[ -z "$portass" ]] && {
				echo -e "\n\033[1;31mPuerto invalido!"
				sleep 3
				fun_conexao
			}
			for porta in $(echo -e $portass); do
				verif_ptrs $porta
			done
			[[ $(grep -wc '14' /etc/issue.net) != '0' ]] || [[ $(grep -wc '8' /etc/issue.net) != '0' ]] && {
				echo -e "\n\033[1;32mINSTALANDO SQUID PROXY\033[0m\n"
				fun_bar 'apt update -y' "apt install squid3 -y"
			} || {
				echo -e "\n\033[1;31m[\033[1;36m1\033[1;31m] \033[1;37m• \033[1;33mSQUID VERSION 3.3.X\n\033[1;31m[\033[1;36m2\033[1;31m] \033[1;37m• \033[1;33mSQUID VERSION 3.5.X\033[0m\n"
				read -p "$(echo -e "\033[1;32mINGRESE UNA OPCIÓN \033[1;37m: ")" -e -i 1 opc
				[[ -z "$opc" ]] && {
					echo -e "\n\033[1;31mOpcion invalida!"
					sleep 2
					fun_conexao
				}
				[[ "$opc" != '1' ]] && {
					[[ "$opc" != '2' ]] && {
						echo -e "\n\033[1;31mOpcion invalida !"
						sleep 2
						fun_conexao
					}
				}
				echo -e "\n\033[1;32mINSTALANDO SQUID PROXY\033[0m\n"
				fun_bar 'apt update -y' "instsqd $opc"
			}
			if [[ -d "/etc/squid/" ]]; then
				var_sqd="/etc/squid/squid.conf"
				var_pay="/etc/squid/payload.txt"
			elif [[ -d "/etc/squid3/" ]]; then
				var_sqd="/etc/squid3/squid.conf"
				var_pay="/etc/squid3/payload.txt"
			else
				echo -e "\n\033[1;33m[\033[1;31mERROR\033[1;33m]\033[1;37m: \033[1;33mEL SQUID PROXY CORROMPIDO\033[0m"
				sleep 2
				fun_conexao
			fi
			cat <<-EOF >$var_pay
				.whatsapp.net/
				.facebook.net/
				.twitter.com/
				.speedtest.net/
			EOF
			cat <<-EOF >$var_sqd
				acl url1 dstdomain -i 127.0.0.1
				acl url2 dstdomain -i localhost
				acl url3 dstdomain -i $ipdovps
				acl url4 dstdomain -i /SSHPLUS?
				acl payload url_regex -i "$var_pay"
				acl all src 0.0.0.0/0

				http_access allow url1
				http_access allow url2
				http_access allow url3
				http_access allow url4
				http_access allow payload
				http_access deny all
				 
				#Portas
			EOF
			for Pts in $(echo -e $portass); do
				echo -e "http_port $Pts" >>$var_sqd
				[[ -f "/usr/sbin/ufw" ]] && ufw allow $Pts/tcp
			done
			cat <<-EOF >>$var_sqd
				#Nome squid
				visible_hostname SSHPLUS 
				via off
				forwarded_for off
				pipeline_prefetch off
			EOF
			sqd_conf() {
				[[ -d "/etc/squid/" ]] && {
					service ssh restart
					/etc/init.d/squid restart
					service squid restart
				}
				[[ -d "/etc/squid3/" ]] && {
					service ssh restart
					/etc/init.d/squid3 restart
					service squid3 restart
				}
			}
			echo -e "\n\033[1;32mCONFIGURANDO SQUID PROXY\033[0m"
			echo ""
			fun_bar 'sqd_conf'
			echo -e "\n\033[1;32mSQUID INSTALADO CON ÉXITO!\033[0m"
			sleep 2.5s
			fun_conexao
		fi
	}

	addpt_sqd() {
		echo -e "\E[44;1;37m         AGREGAR PUERTO AL SQUID         \E[0m"
		echo -e "\n\033[1;33mPUERTOS EN USO: \033[1;32m$sqdp\n"
		if [[ -f "/etc/squid/squid.conf" ]]; then
			var_sqd="/etc/squid/squid.conf"
		elif [[ -f "/etc/squid3/squid.conf" ]]; then
			var_sqd="/etc/squid3/squid.conf"
		else
			echo -e "\n\033[1;31mSQUID NO ESTA INSTALADO!\033[0m"
			echo -e "\n\033[1;31mRetornando...\033[0m"
			sleep 2
			clear
			fun_squid
		fi
		echo -ne "\033[1;32mQUE PUERTO DESEA AGREGAR \033[1;33m?\033[1;37m "
		read pt
		[[ -z "$pt" ]] && {
			echo -e "\n\033[1;31mPuerto invalido!"
			sleep 2
			clear
			fun_conexao
		}
		verif_ptrs $pt
		echo -e "\n\033[1;32mAGREGANDO PUERTO AL SQUID!"
		echo ""
		sed -i "s/#Portas/#Portas\nhttp_port $pt/g" $var_sqd
		fun_bar 'sleep 2'
		echo -e "\n\033[1;32mREINICIANDO EL SQUID!"
		echo ""
		fun_bar 'service squid restart' 'service squid3 restart'
		echo -e "\n\033[1;32mPUERTO AGREGADO CON ÉXITO!"
		sleep 3
		clear
		fun_squid
	}

	rempt_sqd() {
		echo -e "\E[41;1;37m        REMOVER PUERTO DEL SQUID        \E[0m"
		echo -e "\n\033[1;33mPUERTOS EN USO: \033[1;32m$sqdp\n"
		if [[ -f "/etc/squid/squid.conf" ]]; then
			var_sqd="/etc/squid/squid.conf"
		elif [[ -f "/etc/squid3/squid.conf" ]]; then
			var_sqd="/etc/squid3/squid.conf"
		else
			echo -e "\n\033[1;31mSQUID NO ESTA INSTALADO!\033[0m"
			echo -e "\n\033[1;31mRetornando...\033[0m"
			sleep 2
			clear
			fun_squid
		fi
		echo -ne "\033[1;32mQUE PUERTO DESEA REMOVER \033[1;33m?\033[1;37m "
		read pt
		[[ -z "$pt" ]] && {
			echo -e "\n\033[1;31mPuerto invalido!"
			sleep 2
			clear
			fun_conexao
		}
		if grep -E "$pt" $var_sqd >/dev/null 2>&1; then
			echo -e "\n\033[1;32mREMOVIENDO PUERTO DEL SQUID!"
			echo ""
			sed -i "/http_port $pt/d" $var_sqd
			fun_bar 'sleep 3'
			echo -e "\n\033[1;32mREINICIANDO EL SQUID!"
			echo ""
			fun_bar 'service squid restart' 'service squid3 restart'
			echo -e "\n\033[1;32mPUERTO REMOVIDO CON ÉXITO!"
			sleep 3.5s
			clear
			fun_squid
		else
			echo -e "\n\033[1;31mPUERTO \033[1;32m$pt \033[1;31mNO ENCONTRADO!"
			sleep 3.5s
			clear
			fun_squid
		fi
	}

	fun_squid() {
		[[ "$(netstat -nplt | grep -c 'squid')" = "0" ]] && inst_sqd
		echo -e "\E[44;1;37m          GERENCIAR SQUID PROXY           \E[0m"
		[[ "$(netstat -nplt | grep -c 'squid')" != "0" ]] && {
			sqdp=$(netstat -nplt | grep 'squid' | awk -F ":" {'print $4'} | xargs)
			echo -e "\n\033[1;33mPUERTOS\033[1;37m: \033[1;32m$sqdp"
			VarSqdOn="REMOVER SQUID PROXY"
		} || {
			VarSqdOn="INSTALAR SQUID PROXY"
		}
		echo -e "\n\033[1;31m[\033[1;36m1\033[1;31m] \033[1;37m• \033[1;33m$VarSqdOn \033[1;31m
[\033[1;36m2\033[1;31m] \033[1;37m• \033[1;33mAGREGAR PUERTO \033[1;31m
[\033[1;36m3\033[1;31m] \033[1;37m• \033[1;33mREMOVER PUERTO\033[1;31m
[\033[1;36m0\033[1;31m] \033[1;37m• \033[1;33VOLVER\033[0m"
		echo ""
		echo -ne "\033[1;32mQUE DESEA HACER \033[1;33m?\033[1;31m?\033[1;37m "
		read x
		clear
		case $x in
		1 | 01)
			inst_sqd
			;;
		2 | 02)
			addpt_sqd
			;;
		3 | 03)
			rempt_sqd
			;;
		0 | 00)
			echo -e "\033[1;31mRetornando...\033[0m"
			sleep 1
			fun_conexao
			;;
		*)
			echo -e "\033[1;31mOpcion Invalida...\033[0m"
			sleep 2
			fun_conexao
			;;
		esac
	}

fun_drop() {
    if ss -nltp | grep 'dropbear' > /dev/null 2>&1; then
        # Script de gerenciamento do Dropbear quando ele já está instalado
        clear
        dpbr=$(ss -nltp | grep 'dropbear' | awk -F '[: ]+' '{print $5}' | xargs)
        if ps x | grep "limiter" | grep -v grep > /dev/null 2>&1; then
            stats='\033[1;32m◉ '
        else
            stats='\033[1;31m○ '
        fi
        echo -e "\E[44;1;37m              GERENCIAR DROPBEAR               \E[0m"
        echo -e "\n\033[1;33mPUERTOS\033[1;37m: \033[1;32m$dpbr"
        echo ""
        echo -e "\033[1;31m[\033[1;36m1\033[1;31m] \033[1;37m• \033[1;33mLIMITER DROPBEAR $stats\033[0m"
        echo -e "\033[1;31m[\033[1;36m2\033[1;31m] \033[1;37m• \033[1;33mALTERAR PUERTO DROPBEAR\033[0m"
        echo -e "\033[1;31m[\033[1;36m3\033[1;31m] \033[1;37m• \033[1;33mREMOVER DROPBEAR\033[0m"
        echo -e "\033[1;31m[\033[1;36m0\033[1;31m] \033[1;37m• \033[1;33VOLVER\033[0m"
        echo ""
        echo -ne "\033[1;32mQUE DESEA HACER \033[1;33m?\033[1;37m "
        read resposta
        if [[ "$resposta" = '1' ]]; then
            # Controle de Limiter Dropbear
            clear
            if ps x | grep "limiter" | grep -v grep > /dev/null 2>&1; then
                echo -e "\033[1;32mPARANDO EL LIMITER... \033[0m"
                echo ""
                fun_stplimiter() {
                    pidlimiter=$(ps x | grep "limiter" | awk -F "pts" '{print $1}' | xargs)
                    kill -9 $pidlimiter
                    screen -wipe
                }
                fun_bar 'fun_stplimiter' 'sleep 2'
                echo -e "\n\033[1;31m LIMITER DESACTIVADO \033[0m"
                sleep 3
                fun_drop
            else
                echo -e "\n\033[1;32mINICIANDO EL LIMITER... \033[0m"
                echo ""
                fun_bar 'screen -d -m -t limiter droplimiter' 'sleep 3'
                echo -e "\n\033[1;32m  LIMITER ACTIVADO \033[0m"
                sleep 3
                fun_drop
            fi
        elif [[ "$resposta" = '2' ]]; then
            # Alterar Porta Dropbear sem validação
            echo ""
            echo -ne "\033[1;32mQUE PUERTO DESEA UTILIZAR \033[1;33m?\033[1;37m "
            read pt
            var1=$(grep 'DROPBEAR_PORT=' /etc/default/dropbear | cut -d'=' -f2)
            echo -e "\033[1;32mALTERANDO PUERTO DROPBEAR!"
            sed -i "s/\b$var1\b/$pt/g" /etc/default/dropbear >/dev/null 2>&1
            echo ""
            fun_bar 'sleep 2'
            echo -e "\n\033[1;32mREINICIANDO DROPBEAR!"
            echo ""
            fun_bar 'systemctl restart dropbear' 'sleep 2'
            echo -e "\n\033[1;32mPUERTO ALTERADO CON ÉXITO!"
            sleep 3
            clear
            fun_conexao
        elif [[ "$resposta" = '3' ]]; then
            # Remover Dropbear
            echo -e "\n\033[1;32mREMOVIENDO EL DROPBEAR !\033[0m"
            echo ""
            fun_dropunistall() {
                systemctl stop dropbear && systemctl disable dropbear
                apt-get autoremove dropbear -y
                apt-get purge dropbear -y
                rm -rf /etc/default/dropbear
            }
            fun_bar 'fun_dropunistall' 'sleep 2'
            echo -e "\n\033[1;32mDROPBEAR REMOVIDO CON ÉXITO !\033[0m"
            sleep 3
            clear
            fun_conexao
        elif [[ "$resposta" = '0' ]]; then
            # Voltar
            echo -e "\n\033[1;31mRETORNANDO...\033[0m"
            sleep 2
            fun_conexao
        else
            # Opção Inválida
            echo -e "\n\033[1;31mOPCION INVALIDA...\033[0m"
            sleep 2
            fun_conexao
        fi
    else
        # Instalar Dropbear VERSIÓN 2025 no Ubuntu 20 e 22
        clear
        echo -e "\E[44;1;37m           INSTALADOR DROPBEAR VERSIÓN 2025              \E[0m"
        echo -e "\n\033[1;33mESTÁS A PUNTO DE INSTALAR EL DROPBEAR VERSIÓN 2025!\033[0m\n"
        echo -ne "\033[1;32mDESEA CONTINUAR \033[1;31m? \033[1;33m[s/n]:\033[1;37m "
        read resposta
        [[ "$resposta" = 's' ]] && {
            echo -e "\n\033[1;33mDEFINA UN PUERTO PARA EL DROPBEAR!\033[0m\n"
            echo -ne "\033[1;32mCUAL PUERTO \033[1;33m?\033[1;37m "
            read porta
            echo -e "\n\033[1;32mREMOVIENDO VERSIÓNES ANTIGUAS DEL DROPBEAR... \033[0m"
            echo ""
            fun_removedrop() {
                systemctl stop dropbear 2>/dev/null && systemctl disable dropbear 2>/dev/null
                apt-get autoremove dropbear -y 2>/dev/null
                apt-get purge dropbear -y 2>/dev/null
                rm -rf /etc/default/dropbear
            }
            fun_bar 'fun_removedrop' 'sleep 2'
            echo -e "\n\033[1;32mINSTALANDO EL DROPBEAR VERSIÓN 2025! \033[0m"
            echo ""
            # Instalar dependências necessárias
            apt-get install -y build-essential zlib1g-dev libssl-dev wget
            fun_instdrop() {
                wget --no-cache https://github.com/PhoenixxZ2023/dropbear-MOD/raw/main/install; chmod +x install; ./install
                chmod +x install.sh
                ./install.sh
            }
            fun_bar 'fun_instdrop' 'sleep 2'
            fun_ports() {
                sed -i 's/NO_START=1/NO_START=0/g' /etc/default/dropbear >/dev/null 2>&1
                sed -i "s/DROPBEAR_PORT=22/DROPBEAR_PORT=$porta/g" /etc/default/dropbear >/dev/null 2>&1
                systemctl restart dropbear
            }
            fun_bar 'fun_ports' 'sleep 2'
            echo -e "\n\033[1;32mDROPBEAR VERSIÓN 2025 INSTALADO CON ÉXITO! \033[0m"
            sleep 3
            fun_conexao
        } || {
            echo -e "\n\033[1;31mINSTALACION CANCELADA!\033[0m"
            sleep 2
            fun_conexao
        }
    fi
}

	inst_ssl() {
		if netstat -nltp | grep 'stunnel4' 1>/dev/null 2>/dev/null; then
			[[ $(netstat -nltp | grep 'stunnel4' | wc -l) != '0' ]] && sslt=$(netstat -nplt | grep stunnel4 | awk {'print $4'} | awk -F ":" {'print $2'} | xargs) || sslt="\033[1;31mINDISPONIBLE"
			echo -e "\E[44;1;37m              GERENCIAR SSL TUNNEL               \E[0m"
			echo -e "\n\033[1;33mPUERTOS\033[1;37m: \033[1;32m$sslt"
			echo ""
			echo -e "\033[1;31m[\033[1;36m1\033[1;31m] \033[1;37m• \033[1;33mALTERAR PUERTO SSL TUNNEL\033[0m"
			echo -e "\033[1;31m[\033[1;36m2\033[1;31m] \033[1;37m• \033[1;33mREMOVER SSL TUNNEL\033[0m"
			echo -e "\033[1;31m[\033[1;36m0\033[1;31m] \033[1;37m• \033[1;33VOLVER\033[0m"
			echo ""
			echo -ne "\033[1;32mQUE DESEA HACER \033[1;33m?\033[1;37m "
			read resposta
			echo ""
			[[ "$resposta" = '1' ]] && {
				echo -ne "\033[1;32mQUE PUERTO DESEA UTILIZAR \033[1;33m?\033[1;37m "
				read porta
				echo ""
				[[ -z "$porta" ]] && {
					echo ""
					echo -e "\033[1;31mPuerto invalido!"
					sleep 2
					clear
					fun_conexao
				}
				verif_ptrs $porta
				echo -e "\033[1;32mALTERANDO PUERTO SSL TUNNEL!"
				var2=$(grep 'accept' /etc/stunnel/stunnel.conf | awk '{print $NF}')
				sed -i "s/\b$var2\b/$porta/g" /etc/stunnel/stunnel.conf >/dev/null 2>&1
				echo ""
				fun_bar 'sleep 2'
				echo ""
				echo -e "\033[1;32mREINICIANDO SSL TUNNEL!\n"
				fun_bar 'service stunnel4 restart' '/etc/init.d/stunnel4 restart'
				echo ""
				netstat -nltp | grep 'stunnel4' >/dev/null && echo -e "\033[1;32mPUERTO ALTERADO CON ÉXITO !" || echo -e "\033[1;31mERROR INESPERADO!"
				sleep 3.5s
				clear
				fun_conexao
			}
			[[ "$resposta" = '2' ]] && {
				echo -e "\033[1;32mREMOVIENDO EL  SSL TUNNEL !\033[0m"
				del_ssl() {
					service stunnel4 stop
					apt-get remove stunnel4 -y
					apt-get autoremove stunnel4 -y
					apt-get purge stunnel4 -y
					rm -rf /etc/stunnel/stunnel.conf
					rm -rf /etc/default/stunnel4
					rm -rf /etc/stunnel/cert.cert
					rm -rf /etc/stunnel/key.key
				}
				echo ""
				fun_bar 'del_ssl'
				echo ""
				echo -e "\033[1;32mSSL TUNNEL REMOVIDO CON ÉXITO!\033[0m"
				sleep 3
				fun_conexao
			}
		else
			clear
			echo -e "\E[44;1;37m              INSTALAR SSL TUNNEL               \E[0m"
			echo ""
			echo -e "\033[1;31m[\033[1;36m1\033[1;31m] \033[1;37m• \033[1;33mINSTALAR PUERTOS SSL TUNNEL\033[0m"
			echo -e "\033[1;31m[\033[1;36m2\033[1;31m] \033[1;37m• \033[1;33mINSTALAR SSL TUNNEL WEBSOCKET\033[0m"
			echo -e "\033[1;31m[\033[1;36m0\033[1;31m] \033[1;37m• \033[1;33VOLVER\033[0m"
			echo ""
			echo -ne "\033[1;32mQUE DESEA HACER \033[1;33m?\033[1;37m "
			read resposta
			echo ""
			if [[ "$resposta" = '1' ]]; then
				portssl='22'
			elif [[ "$resposta" = '2' ]]; then
				portssl='80'
			elif [[ "$resposta" = '0' ]]; then
				echo -e "\033[1;31mRetornando...\033[0m"
				sleep 3
				fun_conexao
			else
				echo ""
				echo -e "\033[1;31mOpcion invalida !\033[0m"
				sleep 1
				inst_ssl
			fi
			clear
			echo -e "\E[44;1;37m           INSTALADOR SSL TUNNEL             \E[0m"
			echo -e "\n\033[1;33m¿ESTÁS A PUNTO DE INSTALAR SSL TUNNEL !\033[0m"
			echo ""
			echo -ne "\033[1;32mDESEA CONTINUAR \033[1;31m? \033[1;33m[s/n]:\033[1;37m "
			read resposta
			[[ "$resposta" = 's' ]] || [[ "$resposta" = 'S' ]] && {
				echo -e "\n\033[1;33mDEFINA UN PUERTO PARA EL SSL TUNNEL !\033[0m"
				echo ""
				read -p "$(echo -e "\033[1;32mQUE PUERTO DESEA UTILIZAR? \033[1;37m")" -e -i 443 porta
				[[ -z "$porta" ]] && {
					echo ""
					echo -e "\033[1;31mPuerto invalido!"
					sleep 3
					clear
					fun_conexao
				}
				verif_ptrs $porta
				echo -e "\n\033[1;32mINSTALANDO EL SSL TUNNEL !\033[1;33m"
				echo ""
				fun_bar 'apt-get update -y' 'apt-get install stunnel4 -y'
				echo -e "\n\033[1;32mCONFIGURANDO O SSL TUNNEL !\033[0m"
				echo ""
				ssl_conf() {
					echo -e "cert = /etc/stunnel/stunnel.pem\nclient = no\nsocket = a:SO_REUSEADDR=1\nsocket = l:TCP_NODELAY=1\nsocket = r:TCP_NODELAY=1\n\n[stunnel]\nconnect = 127.0.0.1:${portssl}\naccept = ${porta}" >/etc/stunnel/stunnel.conf
				}
				fun_bar 'ssl_conf'
				echo -e "\n\033[1;32mCREANDO CERTIFICADO !\033[0m"
				echo ""
				ssl_certif() {
					crt='EC'
					openssl genrsa -out key.pem 2048 >/dev/null 2>&1
					(
						echo $crt
						echo $crt
						echo $crt
						echo $crt
						echo $crt
						echo $crt
						echo $crt
					) | openssl req -new -x509 -key key.pem -out cert.pem -days 1050 >/dev/null 2>&1
					cat cert.pem key.pem >>/etc/stunnel/stunnel.pem
					rm key.pem cert.pem >/dev/null 2>&1
					sed -i 's/ENABLED=0/ENABLED=1/g' /etc/default/stunnel4
				}
				fun_bar 'ssl_certif'
				echo -e "\n\033[1;32mINICIANDO EL SSL TUNNEL !\033[0m"
				echo ""
				fun_finssl() {
					service stunnel4 restart
					service ssh restart
					/etc/init.d/stunnel4 restart
				}
				fun_bar 'fun_finssl' 'service stunnel4 restart'
				echo -e "\n\033[1;32mSSL TUNNEL INSTALADO CON ÉXITO !\033[1;31m PUERTO: \033[1;33m$porta\033[0m"
				sleep 1
				clear
				echo -e "Corrigiendo SSL CLARO"
				cd /etc/stunnel/
				rm -rf stunnel.conf
				rm -rf stunnel.pem
				wget https://raw.githubusercontent.com/PhoenixxZ2023/PLUS/main/Install/cert
				wget https://raw.githubusercontent.com/PhoenixxZ2023/PLUS/main/Install/key
				wget https://raw.githubusercontent.com/PhoenixxZ2023/PLUS/main/Install/stunnel
				mv cert cert.pem
				mv key key.pem
				mv stunnel stunnel.conf
				chmod 777 cert.pem
				chmod 777 key.pem
				chmod 777 stunnel.conf
				service stunnel4 restart
				cd $HOME
				clear
				echo -e "Corregido"
				sleep 2
				fun_conexao
			} || {
				echo -e "\n\033[1;31mRetornando...\033[0m"
				sleep 2
				clear
				fun_conexao
			}
		fi
	}

        ws_ssl() {
		rm -rf /root/*   && wget https://raw.githubusercontent.com/PhoenixxZ2023/PLUS/refs/heads/main/Modulos/ws_ssl_auto.sh && chmod +x ws_ssl_auto.sh && ./ws_ssl_auto.sh
		sleep 3
		fun_conexao
	}
	fun_ddos() {
		sudo apt install dnsutils
		apt-get install net-tools
		apt-get install tcpdump
		apt-get install unzip
		sudo apt-get install dsniff -y
		sudo apt install grepcidr
		wget https://github.com/jgmdev/ddos-deflate/archive/master.zip -O ddos.zip
		unzip ddos.zip
		cd ddos-deflate-master
		./install.sh
		sleep 9
		fun_conexao
	}

	fun_openvpn() {
		if readlink /proc/$$/exe | grep -qs "dash"; then
			echo "Este script precisa ser ejecutado con bash, no sh"
			exit 1
		fi
		[[ "$EUID" -ne 0 ]] && {
echo "Ejecute como root"
			exit 2
		}
		[[ ! -e /dev/net/tun ]] && {
			echo -e "\033[1;31mTUN TAP NO DISPONIBLE\033[0m"
			sleep 2
			exit 3
		}
		if grep -qs "CentOS release 5" "/etc/redhat-release"; then
			echo "E CentOS 5 es muy antiguo y no es soportado"
			exit 4
		fi
		if [[ -e /etc/debian_version ]]; then
			OS=debian
			GROUPNAME=nogroup
			RCLOCAL='/etc/rc.local'
		elif [[ -e /etc/centos-release || -e /etc/redhat-release ]]; then
			OS=centos
			GROUPNAME=nobody
			RCLOCAL='/etc/rc.d/rc.local'
		else
			echo -e "SISTEMA NO SOPORTADO"
			exit 5
		fi
		newclient() {
			# gerar client.ovpn
			cp /etc/openvpn/client-common.txt ~/$1.ovpn
			echo "<ca>" >>~/$1.ovpn
			cat /etc/openvpn/easy-rsa/pki/ca.crt >>~/$1.ovpn
			echo "</ca>" >>~/$1.ovpn
			echo "<cert>" >>~/$1.ovpn
			cat /etc/openvpn/easy-rsa/pki/issued/$1.crt >>~/$1.ovpn
			echo "</cert>" >>~/$1.ovpn
			echo "<key>" >>~/$1.ovpn
			cat /etc/openvpn/easy-rsa/pki/private/$1.key >>~/$1.ovpn
			echo "</key>" >>~/$1.ovpn
			echo "<tls-auth>" >>~/$1.ovpn
			cat /etc/openvpn/ta.key >>~/$1.ovpn
			echo "</tls-auth>" >>~/$1.ovpn
		}
		IP1=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
		IP2=$(wget -4qO- "http://whatismyip.akamai.com/")
		[[ "$IP1" = "" ]] && {
			IP1=$(hostname -I | cut -d' ' -f1)
		}
		[[ "$IP1" != "$IP2" ]] && {
			IP="$IP1"
		} || {
			IP="$IP2"
		}
		[[ $(netstat -nplt | grep -wc 'openvpn') != '0' ]] && {
			while :; do
				clear

				opnp=$(cat /etc/openvpn/server.conf | grep "port" | awk {'print $2'})
				[[ -d /var/www/html/openvpn ]] && {
					ovpnweb=$(echo -e "\033[1;32m◉ ")
				} || {
					ovpnweb=$(echo -e "\033[1;31m○ ")
				}
				if grep "duplicate-cn" /etc/openvpn/server.conf >/dev/null; then
					mult=$(echo -e "\033[1;32m◉ ")
				else
					mult=$(echo -e "\033[1;31m○ ")
				fi
				echo -e "\E[44;1;37m          GERENCIAR OPENVPN           \E[0m"
				echo ""
				echo -e "\033[1;33mPUERTO\033[1;37m: \033[1;32m$opnp"
				echo ""
				echo -e "\033[1;31m[\033[1;36m1\033[1;31m] \033[1;37m• \033[1;33mALTERAR PUERTO"
				echo -e "\033[1;31m[\033[1;36m2\033[1;31m] \033[1;37m• \033[1;33mREMOVER OPENVPN"
				echo -e "\033[1;31m[\033[1;36m3\033[1;31m] \033[1;37m• \033[1;33mOVPN VIA LINK $ovpnweb"
				echo -e "\033[1;31m[\033[1;36m4\033[1;31m] \033[1;37m• \033[1;33mMULTILOGIN OVPN $mult"
				echo -e "\033[1;31m[\033[1;36m5\033[1;31m] \033[1;37m• \033[1;33mALTERAR HOST DNS"
				echo -e "\033[1;31m[\033[1;36m0\033[1;31m] \033[1;37m• \033[1;33VOLVER"
				echo ""
				echo -ne "\033[1;32mQUE DESEA HACER \033[1;33m?\033[1;31m?\033[1;37m "
				read option
				case $option in
				1)
					clear
					echo -e "\E[44;1;37m         ALTERAR PORTA OPENVPN         \E[0m"
					echo ""
					echo -e "\033[1;33mPUERTO EN USO: \033[1;32m$opnp"
					echo ""
					echo -ne "\033[1;32mQUE PUERTO DESEA UTILIZAR \033[1;33m?\033[1;37m "
					read porta
					[[ -z "$porta" ]] && {
						echo ""
						echo -e "\033[1;31mPuerto invalido!"
						sleep 3
						fun_conexao
					}
					verif_ptrs
					echo ""
					echo -e "\033[1;32mALTERANDO EL PUERTO OPENVPN!\033[1;33m"
					echo ""
					fun_opn() {
						var_ptovpn=$(sed -n '1 p' /etc/openvpn/server.conf)
						sed -i "s/\b$var_ptovpn\b/port $porta/g" /etc/openvpn/server.conf
						sleep 1
						var_ptovpn2=$(sed -n '7 p' /etc/openvpn/client-common.txt | awk {'print $NF'})
						sed -i "s/\b$var_ptovpn2/\b$porta/g" /etc/openvpn/client-common.txt
						sleep 1
						service openvpn restart
					}
					fun_bar 'fun_opn'
					echo ""
					echo -e "\033[1;32mPUERTO ALTERADO CON ÉXITO!\033[1;33m"
					sleep 2
					fun_conexao
					;;
				2)
					echo ""
					echo -ne "\033[1;32mDESEJA REMOVER O OPENVPN \033[1;31m? \033[1;33m[s/n]:\033[1;37m "
					read REMOVE
					[[ "$REMOVE" = 's' ]] && {
						rmv_open() {
							PORT=$(grep '^port ' /etc/openvpn/server.conf | cut -d " " -f 2)
							PROTOCOL=$(grep '^proto ' /etc/openvpn/server.conf | cut -d " " -f 2)
							IP=$(grep 'iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j SNAT --to ' $RCLOCAL | cut -d " " -f 11)
							if pgrep firewalld; then
								firewall-cmd --zone=public --remove-port=$PORT/$PROTOCOL
								firewall-cmd --zone=trusted --remove-source=10.8.0.0/24
								firewall-cmd --permanent --zone=public --remove-port=$PORT/$PROTOCOL
								firewall-cmd --permanent --zone=trusted --remove-source=10.8.0.0/24
							fi
							if iptables -L -n | grep -qE 'REJECT|DROP|ACCEPT'; then
								iptables -D INPUT -p $PROTOCOL --dport $PORT -j ACCEPT
								iptables -D FORWARD -s 10.8.0.0/24 -j ACCEPT
								iptables -D FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
								sed -i "/iptables -I INPUT -p $PROTOCOL --dport $PORT -j ACCEPT/d" $RCLOCAL
								sed -i "/iptables -I FORWARD -s 10.8.0.0\/24 -j ACCEPT/d" $RCLOCAL
								sed -i "/iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT/d" $RCLOCAL
							fi
							iptables -t nat -D POSTROUTING -s 10.8.0.0/24 -j SNAT --to $IP
							sed -i '/iptables -t nat -A POSTROUTING -s 10.8.0.0\/24 -j SNAT --to /d' $RCLOCAL
							if hash sestatus 2>/dev/null; then
								if sestatus | grep "Current mode" | grep -qs "enforcing"; then
									if [[ "$PORT" != '1194' || "$PROTOCOL" = 'tcp' ]]; then
										semanage port -d -t openvpn_port_t -p $PROTOCOL $PORT
									fi
								fi
							fi
							[[ "$OS" = 'debian' ]] && {
								apt-get remove --purge -y openvpn openvpn-blacklist
								apt-get autoremove openvpn -y
								apt-get autoremove -y
							} || {
								yum remove openvpn -y
							}
							rm -rf /etc/openvpn
							rm -rf /usr/share/doc/openvpn*
						}
						echo ""
						echo -e "\033[1;32mREMOVIENDO EL OPENVPN!\033[0m"
						echo ""
						fun_bar 'rmv_open'
						echo ""
						echo -e "\033[1;32mOPENVPN REMOVIDO CON ÉXITO!\033[0m"
						sleep 2
						fun_conexao
					} || {
						echo ""
						echo -e "\033[1;31mRetornando...\033[0m"
						sleep 2
						fun_conexao
					}
					;;
				3)
					[[ -d /var/www/html/openvpn ]] && {
						clear
						fun_spcr() {
							apt-get remove apache2 -y
							apt-get autoremove -y
							rm -rf /var/www/html/openvpn
						}
						function aguarde() {
							helice() {
								fun_spcr >/dev/null 2>&1 &
								tput civis
								while [ -d /proc/$! ]; do
									for i in / - \\ \|; do
										sleep .1
										echo -ne "\e[1D$i"
									done
								done
								tput cnorm
							}
							echo -ne "\033[1;31mDESACTIVANDO\033[1;32m.\033[1;33m.\033[1;31m. \033[1;33m"
							helice
							echo -e "\e[1DOk"
						}
						aguarde
						sleep 2
						fun_openvpn
					} || {
						clear
						fun_apchon() {
							apt-get install apache2 zip -y
							sed -i "s/Listen 80/Listen 81/g" /etc/apache2/ports.conf
							service apache2 restart
							[[ ! -d /var/www/html ]] && {
								mkdir /var/www/html
							}
							[[ ! -d /var/www/html/openvpn ]] && {
								mkdir /var/www/html/openvpn
							}
							touch /var/www/html/openvpn/index.html
							chmod -R 755 /var/www
							/etc/init.d/apache2 restart
						}
						function aguarde2() {
							helice() {
								fun_apchon >/dev/null 2>&1 &
								tput civis
								while [ -d /proc/$! ]; do
									for i in / - \\ \|; do
										sleep .1
										echo -ne "\e[1D$i"
									done
								done
								tput cnorm
							}
							echo -ne "\033[1;32mATIVANDO\033[1;32m.\033[1;33m.\033[1;31m. \033[1;33m"
							helice
							echo -e "\e[1DOk"
						}
						aguarde2
						fun_openvpn
					}
					;;
				4)
					if grep "duplicate-cn" /etc/openvpn/server.conf >/dev/null; then
						clear
						fun_multon() {
							sed -i '/duplicate-cn/d' /etc/openvpn/server.conf
							sleep 1.5s
							service openvpn restart >/dev/null
							sleep 2
						}
						fun_spinmult() {
							helice() {
								fun_multon >/dev/null 2>&1 &
								tput civis
								while [ -d /proc/$! ]; do
									for i in / - \\ \|; do
										sleep .1
										echo -ne "\e[1D$i"
									done
								done
								tput cnorm
							}
							echo ""
							echo -ne "\033[1;31mBLOQUEANDO MULTILOGIN\033[1;32m.\033[1;33m.\033[1;31m. \033[1;33m"
							helice
							echo -e "\e[1DOk"
						}
						fun_spinmult
						sleep 1
						fun_openvpn
					else
						clear
						fun_multoff() {
							grep -v "^duplicate-cn" /etc/openvpn/server.conf >/tmp/tmpass && mv /tmp/tmpass /etc/openvpn/server.conf
							echo "duplicate-cn" >>/etc/openvpn/server.conf
							sleep 1.5s
							service openvpn restart >/dev/null
						}
						fun_spinmult2() {
							helice() {
								fun_multoff >/dev/null 2>&1 &
								tput civis
								while [ -d /proc/$! ]; do
									for i in / - \\ \|; do
										sleep .1
										echo -ne "\e[1D$i"
									done
								done
								tput cnorm
							}
							echo ""
							echo -ne "\033[1;32mPERMITIENDO MULTILOGIN\033[1;32m.\033[1;33m.\033[1;31m. \033[1;33m"
							helice
							echo -e "\e[1DOk"
						}
						fun_spinmult2
						sleep 1
						fun_openvpn
					fi
					;;
				5)
					clear
					echo -e "\E[44;1;37m         ALTERAR HOST DNS           \E[0m"
					echo ""
					echo -e "\033[1;31m[\033[1;36m1\033[1;31m] \033[1;37m• \033[1;33mADICIONAR HOST DNS"
					echo -e "\033[1;31m[\033[1;36m2\033[1;31m] \033[1;37m• \033[1;33mREMOVER HOST DNS"
					echo -e "\033[1;31m[\033[1;36m3\033[1;31m] \033[1;37m• \033[1;33mEDITAR MANUALMENTE"
					echo -e "\033[1;31m[\033[1;36m0\033[1;31m] \033[1;37m• \033[1;33VOLVER"
					echo ""
					echo -ne "\033[1;32mQUE DESEA HACER \033[1;33m?\033[1;31m?\033[1;37m "
					read resp
					[[ -z "$resp" ]] && {
						echo ""
						echo -e "\033[1;31mOpcion invalida!"
						sleep 3
						fun_openvpn
					}
					if [[ "$resp" = '1' ]]; then
						clear
						echo -e "\E[44;1;37m            Adicionar Host DNS            \E[0m"
						echo ""
						echo -e "\033[1;33mLista los hosts actuales:\033[0m "
						echo ""
						i=0
						for _host in $(grep -w "127.0.0.1" /etc/hosts | grep -v "localhost" | cut -d' ' -f2); do
							echo -e "\033[1;32m$_host"
						done
						echo ""
						echo -ne "\033[1;33mDigite el host a ser agregado\033[1;37m : "
						read host
						if [[ -z $host ]]; then
							echo ""
							echo -e "\E[41;1;37m        Campo Vacío o invalido !       \E[0m"
							sleep 2
							fun_openvpn
						fi
						if [[ "$(grep -w "$host" /etc/hosts | wc -l)" -gt "0" ]]; then
							echo -e "\E[41;1;37m    Ese host ya está agregado  !    \E[0m"
							sleep 2
							fun_openvpn
						fi
						sed -i "3i\127.0.0.1 $host" /etc/hosts
						echo ""
						echo -e "\E[44;1;37m      Host agregado con éxito !      \E[0m"
						sleep 2
						fun_openvpn
					elif [[ "$resp" = '2' ]]; then
						clear
						echo -e "\E[44;1;37m            Remover Host DNS            \E[0m"
						echo ""
						echo -e "\033[1;33mLista los hosts actuales:\033[0m "
						echo ""
						i=0
						for _host in $(grep -w "127.0.0.1" /etc/hosts | grep -v "localhost" | cut -d' ' -f2); do
							i=$(expr $i + 1)
							oP+=$i
							[[ $i == [1-9] ]] && oP+=" 0$i" && i=0$i
							oP+=":$_host\n"
							echo -e "\033[1;33m[\033[1;31m$i\033[1;33m] \033[1;37m- \033[1;32m$_host\033[0m"
						done
						echo ""
						echo -ne "\033[1;32mSeleccione el host a ser removido \033[1;33m[\033[1;37m1\033[1;31m-\033[1;37m$i\033[1;33m]\033[1;37m: "
						read option
						if [[ -z $option ]]; then
							echo ""
							echo -e "\E[41;1;37m          Opción invalida  !        \E[0m"
							sleep 2
							fun_openvpn
						fi
						host=$(echo -e "$oP" | grep -E "\b$option\b" | cut -d: -f2)
						hst=$(grep -v "127.0.0.1 $host" /etc/hosts)
						echo "$hst" >/etc/hosts
						echo ""
						echo -e "\E[41;1;37m      Host removido con éxito !      \E[0m"
						sleep 2
						fun_openvpn
					elif [[ "$resp" = '3' ]]; then
						echo -e "\n\033[1;32mALTERANDO ARCHIVO \033[1;37m/etc/hosts\033[0m"
						echo -e "\n\033[1;31mATENCION!\033[0m"
						echo -e "\n\033[1;33mPARA GUARDAR USE LAS TECLAS \033[1;32mctrl x y\033[0m"
						sleep 4
						clear
						nano /etc/hosts
						echo -e "\n\033[1;32mALTERADO CON EXITO!\033[0m"
						sleep 3
						fun_openvpn
					elif [[ "$resp" = '0' ]]; then
						echo ""
						echo -e "\033[1;31mRetornando...\033[0m"
						sleep 2
						fun_conexao
					else
						echo ""
						echo -e "\033[1;31mOpcion invalida !\033[0m"
						sleep 2
						fun_openvpn
					fi
					;;
				0)
					fun_conexao
					;;
				*)
					echo ""
					echo -e "\033[1;31mOpcion invalida !\033[0m"
					sleep 2
					fun_openvpn
					;;
				esac
			done
		} || {
                        clear
echo -e "\E[44;1;37m              INSTALADOR OPENVPN               \E[0m"
echo ""
echo -e "\033[1;33mRESPONDE LAS PREGUNTAS PARA INICIAR LA INSTALACIÓN"
echo ""
echo -ne "\033[1;32mPARA CONTINUAR CONFIRME SU IP: \033[1;37m"
read -e -i $IP IP
[[ -z "$IP" ]] && {
    echo ""
    echo -e "\033[1;31mIP invalido!"
    sleep 3
    fun_conexao
}
echo ""
read -p "$(echo -e "\033[1;32mQUE PUERTO DESEA UTILIZAR? \033[1;37m")" -e -i 1194 porta
[[ -z "$porta" ]] && {
    echo ""
    echo -e "\033[1;31mPuerto invalido!"
    sleep 2
    fun_conexao
}
echo ""
echo -e "\033[1;33mVERIFICANDO PUERTO..."
verif_ptrs $porta
echo ""
echo -e "\033[1;31m[\033[1;36m1\033[1;31m] \033[1;33mSistema"
echo -e "\033[1;31m[\033[1;36m2\033[1;31m] \033[1;33mGoogle (\033[1;32mRecomendado\033[1;33m)"
echo -e "\033[1;31m[\033[1;36m3\033[1;31m] \033[1;33mOpenDNS"
echo -e "\033[1;31m[\033[1;36m4\033[1;31m] \033[1;33mCloudflare"
echo -e "\033[1;31m[\033[1;36m5\033[1;31m] \033[1;33mHurricane Electric"
echo -e "\033[1;31m[\033[1;36m6\033[1;31m] \033[1;33mVerisign"
echo -e "\033[1;31m[\033[1;36m7\033[1;31m] \033[1;33mDNS Performace\033[0m"
echo ""
read -p "$(echo -e "\033[1;32mQUE DNS DESEA UTILIZAR? \033[1;37m")" -e -i 2 DNS
echo ""
echo -e "\033[1;31m[\033[1;36m1\033[1;31m] \033[1;33mUDP"
echo -e "\033[1;31m[\033[1;36m2\033[1;31m] \033[1;33mTCP (\033[1;32mRecomendado\033[1;33m)"
echo ""
read -p "$(echo -e "\033[1;32mQUE PROTOCOLO DESEA UTILIZAR EN OPENVPN? \033[1;37m")" -e -i 2 resp
if [[ "$resp" = '1' ]]; then
    PROTOCOL=udp
elif [[ "$resp" = '2' ]]; then
    PROTOCOL=tcp
else
    PROTOCOL=tcp
fi
echo ""
[[ "$OS" = 'debian' ]] && {
echo -e "\033[1;32mACTUALIZANDO EL SISTEMA"
echo ""
fun_attos() {
apt-get update-y
}
fun_bar 'fun_attos'
echo ""
echo -e "\033[1;32mINSTALANDO DEPENDENCIAS"
echo ""
fun_instdep() {
apt-get install openvpn iptables openssl ca-certificates -y
apt-get install zip -y
}
fun_bar 'fun_instdep'
} || {
fun_bar 'yum install epel-release -y'
fun_bar 'yum install openvpn iptables openssl wget ca-certificates -y'
}
[[ -d /etc/openvpn/easy-rsa/ ]] && {
rm -rf /etc/openvpn/easy-rsa/
}
# Adquirindo easy-rsa
echo ""
fun_dep() {
    wget -O ~/EasyRSA-3.1.0.tgz "https://raw.githubusercontent.com/PhoenixxZ2023/PLUS/main/Install/EasyRSA-3.1.0.tgz"
    [[ ! -e $HOME/EasyRSA-3.1.0.tgz ]] && {
        wget -O ~/EasyRSA-3.1.0.tgz "https://raw.githubusercontent.com/PhoenixxZ2023/PLUS/main/Install/EasyRSA-3.1.0.tgz"
    }
    tar xzf ~/EasyRSA-3.1.0.tgz -C ~/
    mv ~/EasyRSA-3.1.0/ /etc/openvpn/
    mv /etc/openvpn/EasyRSA-3.1.0/ /etc/openvpn/easy-rsa/
    chown -R root:root /etc/openvpn/easy-rsa/
    rm -rf ~/EasyRSA-3.1.0.tgz
    cd /etc/openvpn/easy-rsa/
    ./easyrsa init-pki
    ./easyrsa --batch build-ca nopass
    ./easyrsa gen-dh
    ./easyrsa build-server-full server nopass
    ./easyrsa build-client-full SSHPLUS nopass
    ./easyrsa gen-crl
    cp pki/ca.crt pki/private/ca.key pki/dh.pem pki/issued/server.crt pki/private/server.key /etc/openvpn/easy-rsa/pki/crl.pem /etc/openvpn
    chown nobody:$GROUPNAME /etc/openvpn/crl.pem
    openvpn --genkey --secret /etc/openvpn/ta.key
    # Generando server.conf
    echo "port $porta
proto $PROTOCOL
dev tun
sndbuf 0
rcvbuf 0
ca ca.crt
cert server.crt
key server.key
dh dh.pem
tls-auth ta.key 0
topology subnet
server 10.8.0.0 255.255.255.0
ifconfig-pool-persist ipp.txt" >/etc/openvpn/server.conf
    echo 'push "redirect-gateway def1 bypass-dhcp"' >>/etc/openvpn/server.conf
    # DNS
    case $DNS in
    1)
        grep -v '#' /etc/resolv.conf | grep 'nameserver' | grep -E -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | while read line; do
            echo "push \"dhcp-option DNS $line\"" >>/etc/openvpn/server.conf
        done
        ;;
    2)
        echo 'push "dhcp-option DNS 8.8.8.8"' >>/etc/openvpn/server.conf
        echo 'push "dhcp-option DNS 8.8.4.4"' >>/etc/openvpn/server.conf
        ;;
    3)
        echo 'push "dhcp-option DNS 208.67.222.222"' >>/etc/openvpn/server.conf
        echo 'push "dhcp-option DNS 208.67.220.220"' >>/etc/openvpn/server.conf
        ;;
    4)
        echo 'push "dhcp-option DNS 1.1.1.1"' >>/etc/openvpn/server.conf
        echo 'push "dhcp-option DNS 1.0.0.1"' >>/etc/openvpn/server.conf
        ;;
    5)
        echo 'push "dhcp-option DNS 74.82.42.42"' >>/etc/openvpn/server.conf
        ;;
    6)
        echo 'push "dhcp-option DNS 64.6.64.6"' >>/etc/openvpn/server.conf
        echo 'push "dhcp-option DNS 64.6.65.6"' >>/etc/openvpn/server.conf
        ;;
    7)
        echo 'push "dhcp-option DNS 156.154.70.1"' >>/etc/openvpn/server.conf
        echo 'push "dhcp-option DNS 156.154.71.1"' >>/etc/openvpn/server.conf
        ;;
    esac
    echo "keepalive 10 120
float
cipher AES-256-CBC
comp-lzo yes
user nobody
group $GROUPNAME
persist-key
persist-tun
status openvpn-status.log
management localhost 7505
verb 3
crl-verify crl.pem
client-to-client
client-cert-not-required
username-as-common-name
plugin $(find /usr -type f -name 'openvpn-plugin-auth-pam.so') login
duplicate-cn" >>/etc/openvpn/server.conf
				sed -i '/\<net.ipv4.ip_forward\>/c\net.ipv4.ip_forward=1' /etc/sysctl.conf
				if ! grep -q "\<net.ipv4.ip_forward\>" /etc/sysctl.conf; then
					echo 'net.ipv4.ip_forward=1' >>/etc/sysctl.conf
				fi
				echo 1 >/proc/sys/net/ipv4/ip_forward
				if [[ "$OS" = 'debian' && ! -e $RCLOCAL ]]; then
					echo '#!/bin/sh -e
exit 0' >$RCLOCAL
				fi
				chmod +x $RCLOCAL
				iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j SNAT --to $IP
				sed -i "1 a\iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j SNAT --to $IP" $RCLOCAL
				if pgrep firewalld; then
					firewall-cmd --zone=public --add-port=$porta/$PROTOCOL
					firewall-cmd --zone=trusted --add-source=10.8.0.0/24
					firewall-cmd --permanent --zone=public --add-port=$porta/$PROTOCOL
					firewall-cmd --permanent --zone=trusted --add-source=10.8.0.0/24
				fi
				if iptables -L -n | grep -qE 'REJECT|DROP'; then
					iptables -I INPUT -p $PROTOCOL --dport $porta -j ACCEPT
					iptables -I FORWARD -s 10.8.0.0/24 -j ACCEPT
					iptables -F
					iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
					sed -i "1 a\iptables -I INPUT -p $PROTOCOL --dport $porta -j ACCEPT" $RCLOCAL
					sed -i "1 a\iptables -I FORWARD -s 10.8.0.0/24 -j ACCEPT" $RCLOCAL
					sed -i "1 a\iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT" $RCLOCAL
				fi
				if hash sestatus 2>/dev/null; then
					if sestatus | grep "Current mode" | grep -qs "enforcing"; then
						if [[ "$porta" != '1194' || "$PROTOCOL" = 'tcp' ]]; then
							if ! hash semanage 2>/dev/null; then
								yum install policycoreutils-python -y
							fi
							semanage port -a -t openvpn_port_t -p $PROTOCOL $porta
						fi
					fi
				fi
			}
			echo -e "\033[1;32mINSTALANDO EL OPENVPN  \033[1;31m(\033[1;33mPUEDE DEMORAR!\033[1;31m)"
			echo ""
			fun_bar 'fun_dep > /dev/null 2>&1'
			fun_ropen() {
				[[ "$OS" = 'debian' ]] && {
					if pgrep systemd-journal; then
						systemctl restart openvpn@server.service
					else
						/etc/init.d/openvpn restart
					fi
				} || {
					if pgrep systemd-journal; then
						systemctl restart openvpn@server.service
						systemctl enable openvpn@server.service
					else
						service openvpn restart
						chkconfig openvpn on
					fi
				}
			}
			echo ""
			echo -e "\033[1;32mREINICIANDO EL OPENVPN"
			echo ""
			fun_bar 'fun_ropen'
			IP2=$(wget -4qO- "http://whatismyip.akamai.com/")
			if [[ "$IP" != "$IP2" ]]; then
				IP="$IP2"
			fi
			[[ $(grep -wc 'open.py' /etc/autostart) != '0' ]] && pt_proxy=$(grep -w 'open.py' /etc/autostart | cut -d' ' -f6) || pt_proxy=80
			cat <<-EOF >/etc/openvpn/client-common.txt
				client
				dev tun
				proto $PROTOCOL
				sndbuf 0
				rcvbuf 0
				remote 127.0.0.1 $porta
				resolv-retry 5
				nobind
				persist-key
				persist-tun
				remote-cert-tls server
				cipher AES-256-CBC
				comp-lzo yes
				setenv opt block-outside-dns
				key-direction 1
				verb 3
				auth-user-pass
				keepalive 10 120
				float
			EOF
			# gerar client.ovpn
			newclient "SSHPLUS"
			[[ "$(netstat -nplt | grep -wc 'openvpn')" != '0' ]] && echo -e "\n\033[1;32mOPENVPN INSTALADO CON ÉXITO\033[0m" || echo -e "\n\033[1;31mERROR ! INSTALACION CORROMPIDA\033[0m"
		}
		sed -i '$ i\echo 1 > /proc/sys/net/ipv4/ip_forward' /etc/rc.local
		sed -i '$ i\echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6' /etc/rc.local
		sed -i '$ i\iptables -A INPUT -p tcp --dport 25 -j DROP' /etc/rc.local
		sed -i '$ i\iptables -A INPUT -p tcp --dport 110 -j DROP' /etc/rc.local
		sed -i '$ i\iptables -A OUTPUT -p tcp --dport 25 -j DROP' /etc/rc.local
		sed -i '$ i\iptables -A OUTPUT -p tcp --dport 110 -j DROP' /etc/rc.local
		sed -i '$ i\iptables -A FORWARD -p tcp --dport 25 -j DROP' /etc/rc.local
		sed -i '$ i\iptables -A FORWARD -p tcp --dport 110 -j DROP' /etc/rc.local
		sleep 3
		fun_conexao
	}

	fun_socks() {
		clear
            	# Verificar status de cada serviço uma única vez e armazenar em variáveis
		var_sks1=$( [[ $(screen -list | grep -wc 'proxy') -ne 0 ]] && echo "\033[1;32m◉" || echo "\033[1;31m○" )
		var_sks2=$( [[ $(screen -list | grep -wc 'ws') -ne 0 ]] && echo "\033[1;32m◉" || echo "\033[1;31m○" )
		var_sks3=$( [[ $(screen -list | grep -wc 'novoWS') -ne 0 ]] && echo "\033[1;32m◉" || echo "\033[1;31m○" )
		var_sks4=$( [[ $(screen -list | grep -wc 'security') -ne 0 ]] && echo "\033[1;32m◉" || echo "\033[1;31m○" )
		var_sks6=$( [[ $(screen -list | grep -wc 'proxydt') -ne 0 ]] && echo "\033[1;32m◉" || echo "\033[1;31m○" )
		sksop=$( [[ $(screen -list | grep -wc 'openpy') -ne 0 ]] && echo "\033[1;32m◉" || echo "\033[1;31m○" )
		echo ""
		# Exibir o menu
		echo -e "\033[01;31m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\033[0m"
		echo -e "\033[01;31m┃\033[0m\033[44;1;37m         ★  WEB SOCKS  ★         \033[0m\033[01;31m┃\033[0m"
		echo -e "\033[01;31m┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫\033[0m"
		echo -e "\033[01;31m┃\033[0m\033[1;31m[\033[1;36m01\033[1;31m] \033[1;37m• \033[1;33mSOCKS SSH $var_sks1 \033[0m              \033[01;31m┃\033[0m"
		echo -e "\033[01;31m┃\033[0m\033[1;31m[\033[1;36m02\033[1;31m] \033[1;37m• \033[1;33mWEBSOCKET-2025 $var_sks2 \033[0m         \033[01;31m┃\033[0m"
		echo -e "\033[01;31m┃\033[0m\033[1;31m[\033[1;36m03\033[1;31m] \033[1;37m• \033[1;33mWEBSOCKET SECURITY $var_sks3 \033[0m     \033[01;31m┃\033[0m"
		echo -e "\033[01;31m┃\033[0m\033[1;31m[\033[1;36m04\033[1;31m] \033[1;37m• \033[1;33mWEBSOCKET SECURITY-V2.0 $var_sks4 \033[0m\033[01;31m┃\033[0m"
		echo -e "\033[01;31m┃\033[0m\033[1;31m[\033[1;36m05\033[1;31m] \033[1;37m• \033[1;33mPROXY DTUNNEL-MOD-V2.0 $var_sks6 \033[0m \033[01;31m┃\033[0m"
		echo -e "\033[01;31m┃\033[0m\033[1;31m[\033[1;36m06\033[1;31m] \033[1;37m• \033[1;33mSOCKS OPENVPN $sksop \033[0m          \033[01;31m┃\033[0m"
		echo -e "\033[01;31m┃\033[0m\033[1;31m[\033[1;36m07\033[1;31m] \033[1;37m• \033[1;33mABRIR PUERTO\033[0m               \033[01;31m┃\033[0m"
		echo -e "\033[01;31m┃\033[0m\033[1;31m[\033[1;36m08\033[1;31m] \033[1;37m• \033[1;33mALTERAR STATUS SOCKS SSH\033[0m  \033[01;31m┃\033[0m"
		echo -e "\033[01;31m┃\033[0m\033[1;31m[\033[1;36m09\033[1;31m] \033[1;37m• \033[1;33mALTERAR STATUS WEBSOCKET\033[0m  \033[01;31m┃\033[0m"
		echo -e "\033[01;31m┃\033[0m\033[1;31m[\033[1;36m00\033[1;31m] \033[1;37m• \033[1;33VOLVER\033[0m                    \033[01;31m┃\033[0m"
		echo -e "\033[01;31m┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\033[0m"
		read -p "$(echo -e "\033[1;31m┗━➤\033[1;32mELIJA UNA OPCION DESEADA\033[1;33m\033[1;31m\033[1;37m: ")" resposta
		if [[ "$resposta" = '1' ]]; then
			if ps x | grep -w proxy.py | grep -v grep 1>/dev/null 2>/dev/null; then
				clear
				echo -e "\E[41;1;37m             PROXY SOCKS              \E[0m"
				echo ""
				fun_socksoff() {
					for pidproxy in $(screen -ls | grep ".proxy" | awk {'print $1'}); do
						screen -r -S "$pidproxy" -X quit
					done
					[[ $(grep -wc "proxy.py" /etc/autostart) != '0' ]] && {
						sed -i '/proxy.py/d' /etc/autostart
					}
					sleep 1
					screen -wipe >/dev/null
				}
				echo -e "\033[1;32mDESACTIVANDO EL PROXY SOCKS\033[1;33m"
				echo ""
				fun_bar 'fun_socksoff'
				echo ""
				echo -e "\033[1;32mPROXY SOCKS DESACTIVADO CON ÉXITO!\033[1;33m"
				sleep 3
				fun_socks
			else
				clear
				echo -e "\E[44;1;37m             PROXY SOCKS              \E[0m"
				echo ""
				echo -ne "\033[1;32mQUE PUERTO DESEA UTILIZAR \033[1;33m?\033[1;37m: "
				read porta
				[[ -z "$porta" ]] && {
					echo ""
					echo -e "\033[1;31mPuerto invalido!"
					sleep 3
					clear
					fun_conexao
				}
				verif_ptrs $porta
				fun_inisocks() {
					sleep 1
					screen -dmS proxy python3 /etc/SSHPlus/proxy.py $porta
					[[ $(grep -wc "proxy.py" /etc/autostart) = '0' ]] && {
						echo -e "netstat -tlpn | grep -w $porta > /dev/null || {  screen -r -S 'proxy' -X quit;  screen -dmS proxy python3 /etc/SSHPlus/proxy.py $porta; }" >>/etc/autostart
					} || {
						sed -i '/proxy.py/d' /etc/autostart
						echo -e "netstat -tlpn | grep -w $porta > /dev/null || {  screen -r -S 'proxy' -X quit;  screen -dmS proxy python3 /etc/SSHPlus/proxy.py $porta; }" >>/etc/autostart
					}
				}
				echo ""
				echo -e "\033[1;32mINICIANDO EL PROXY SOCKS\033[1;33m"
				echo ""
				fun_bar 'fun_inisocks'
				echo ""
				echo -e "\033[1;32mSOCKS ACTIVADO CON ÉXITO\033[1;33m"
				sleep 3
				fun_socks
			fi



        elif [[ "$resposta" = '2' ]]; then
			clear
			[[ -e "/opt/agn_websocket" ]] && {
			websocket menu
		} || {
			cd $HOME
			bash <(curl -sL https://raw.githubusercontent.com/PhoenixxZ2023/websocket2025/main/install.sh)
			websocket menu
		}



elif [[ "$resposta" = '3' ]]; then
		clear
		if ps x | grep -w WebSocket | grep -v grep 1>/dev/null 2>/dev/null; then
		echo -e "\E[41;1;37m         WEBSOCKET SECURITY              \E[0m"
				echo ""
				fun_wsswsocksoff() { 
					pkill WebSocket
					for pidproxy in $(screen -ls | grep ".ws" | awk {'print $1'}); do
						screen -r -S "$WebSocket" -X quit
					done
					[[ $(grep -wc "WebSocket" /etc/autostart) != '0' ]] && {
						sed -i '/WebSocket/d' /etc/autostart
					}
					sleep 1
					screen -wipe >/dev/null
				}
				echo -e "\033[1;32mDESACTIVANDO EL WEBSOCKET SECURITY\033[1;33m"
				echo ""
				fun_bar 'fun_wsswsocksoff'
				echo ""
				echo -e "\033[1;32mWEBSOCKET SECURITY DESACTIVADO CON ÉXITO!\033[1;33m"
				
				fun_socks
			else
		echo -e "\E[44;1;37m       🛸   WEBSOCKET SECURITY   🛸           \E[0m"
				echo ""
				rm -rf /etc/mamalista
				read -p "$(echo -e "★ \033[1;32mQUE PUERTO DESEA ESCOJER? \033[1;37m")" -e -i 80 cuzin
				echo "$cuzin" > /etc/mamalista
				echo ""
				read -p "$(echo -e "★ \033[1;32mQUE MENSAJE QUIERES? \033[1;37m")" -e -i WebSecurity cuzin2
				rm -rf /etc/mamalista2
				echo "$cuzin2" > /etc/mamalista2
				[[ -z "cuzin" ]] && {
					echo ""
					echo -e "\033[1;31mPuerto invalido!"
					
				fun_socks
				}
				verif_ptrs $porta
				fun_iniwssocks() {
					sleep 1
					screen -dmS novoWS /etc/SSHPlus/WebSocket -proxy_port 0.0.0.0:$(cat /etc/mamalista) -msg="$(cat /etc/mamalista2) \033[01,33m"
					[[ $(grep -wc "WebSocket" /etc/autostart) = '0' ]] && {
						echo -e "screen -dmS novoWS /etc/SSHPlus/WebSocket -proxy_port 0.0.0.0:$(cat /etc/mamalista) -msg='$(cat /etc/mamalista2) \033[01,33m"
					} || {
						sed -i '/WebSocket/d' /etc/autostart
						echo -e "screen -dmS novoWS /etc/SSHPlus/WebSocket -proxy_port 0.0.0.0:$(cat /etc/mamalista) -msg='$(cat /etc/mamalista2) \033[01,33m"
					}
				}
				echo ""
				echo -e "\033[1;32mINICIANDO EL WEBSOCKET SECURITY\033[1;33m"
				echo ""
				fun_bar 'fun_iniwssocks'
				echo ""
				echo -e "\033[1;32m WEBSOCKET SECURITY ACTIVADO CON ÉXITO! ;)\033[1;33m"
				sleep 3
				fun_socks
			fi



elif [[ "$resposta" = '4' ]]; then
    clear
    if ps x | grep -w security | grep -v grep 1>/dev/null 2>/dev/null; then
        echo -e "\E[41;1;37m          WEBSOCKET SECURITY-V2.0         \E[0m"
        echo ""
        fun_securityoff() {
            for pidsecurity in $(screen -ls | grep ".security" | awk {'print $1'}); do
                screen -r -S "$pidsecurity" -X quit
            done
            [[ $(grep -wc "security" /etc/autostart) != '0' ]] && {
                sed -i '/security/d' /etc/autostart
            }
            sleep 1
            screen -wipe >/dev/null
        }
        echo -e "\033[1;32mDESACTIVANDO EL WEBSOCKET SECURITY\033[1;33m"
        echo ""
        fun_bar 'fun_securityoff'
        echo ""
        echo -e "\033[1;32mSECURITY DESACTIVADO CON ÉXITO!\033[1;33m"
        
        fun_socks
    else
        echo -e "\E[44;1;37m          WEBSOCKET SECURITY         \E[0m"
        echo ""
        echo -e "\033[1;32mQUE PUERTO DESEA UTILIZAR ? \033"
        echo ""
        echo -e "\033[1;32mEJEMPLO :\033[1;33m80 o 8080\033"
        echo ""
        read -p "$(echo -e "\033[1;32mQUE PUERTO DESEA UTILIZAR? \033[1;37m: ")" portaws
        [[ -z "$portaws" ]] && {
            echo ""
            echo -e "\033[1;31mPuerto invalido!"
            
            fun_socks
        }
        verif_ptrs $portaws
        fun_inisecurity() {
            sleep 1
            screen -dmS security /etc/SSHPlus/security -proxy_port 0.0.0.0:$portaws -msg=SECURITY
            [[ $(grep -wc "security" /etc/autostart) = '0' ]] && {
                echo -e "netstat -tlpn | grep -w $portaws > /dev/null || {  screen -r -S 'security' -X quit;  screen -dmS security /etc/SSHPlus/security -proxy_port 0.0.0.0:$portaws -msg=SECURITY; }" >>/etc/autostart
            } || {
                sed -i '/security/d' /etc/autostart
                echo -e "netstat -tlpn | grep -w $portaws > /dev/null || {  screen -r -S 'security' -X quit;  screen -dmS security /etc/SSHPlus/security -proxy_port 0.0.0.0:$portaws -msg=SECURITY; }" >>/etc/autostart
            }
        }
        echo ""
        echo -e "\033[1;32mINICIANDO WEBSOCKET SECURITY\033[1;33m"
        echo ""
        fun_bar 'fun_inisecurity'
        echo ""
        echo -e "\033[1;32SECURITY ACTIVADO CON ÉXITO\033[1;33m"
        
        fun_socks
    fi
						
			
elif [[ "$resposta" = '500' ]]; then
    clear


elif [[ "$resposta" = '5' ]]; then
    clear
    if ps x | grep -w proxydt | grep -v grep 1>/dev/null 2>/dev/null; then
        echo -e "\E[41;1;37m             PROXY DT               \E[0m"
        echo ""
        fun_proxydtoff() {
            for pidproxy in $(screen -ls | grep ".proxydt" | awk {'print $1'}); do
                screen -r -S "$pidproxy" -X quit
            done
            [[ $(grep -wc "proxydt" /etc/autostart) != '0' ]] && {
                sed -i '/proxydt/d' /etc/autostart
            }
            sleep 1
            screen -wipe >/dev/null
        }
        echo -e "\033[1;32mDESACTIVANDO EL PROXY DT\033[1;33m"
        echo ""
        fun_bar 'fun_proxydtoff'
        echo ""
        echo -e "\033[1;32mPROXY DT DESACTIVADO CON ÉXITO!\033[1;33m"
        
        fun_socks
    else
        echo -e "\E[44;1;37m             PROXY DT               \E[0m"
        echo ""
        echo -e "\033[1;32mQUE PUERTO DESEA UTILIZAR ? \033"
        echo ""
        echo -e "\033[1;32mEJEMPLO :\033[1;33m80 o 8080\033"
        echo ""
        read -p "$(echo -e "\033[1;32mQUE PUERTO DESEA UTILIZAR? \033[1;37m: ")" porta
        [[ -z "$porta" ]] && {
            echo ""
            echo -e "\033[1;31mPuerto invalido!"
            
            fun_socks
        }
        verif_ptrs $porta
        fun_iniproxydt() {
            sleep 1
            screen -dmS proxydt /etc/SSHPlus/proxydt --port $porta --http --openvpn-port --response PROXYDT
            [[ $(grep -wc "proxydt" /etc/autostart) = '0' ]] && {
                echo -e "netstat -tlpn | grep -w $porta > /dev/null || {  screen -r -S 'proxydt' -X quit;  screen -dmS proxydt /etc/SSHPlus/proxydt --port $porta --http --openvpn-port --response PROXY; }" >>/etc/autostart
            } || {
                sed -i '/proxydt/d' /etc/autostart
                echo -e "netstat -tlpn | grep -w $porta > /dev/null || {  screen -r -S 'proxydt' -X quit;  screen -dmS proxydt /etc/SSHPlus/proxydt --port $porta --http --openvpn-port --response PROXY; }" >>/etc/autostart
            }
        }
        echo ""
        echo -e "\033[1;32mINICIANDO EL PROXY DT\033[1;33m"
        echo ""
        fun_bar 'fun_iniproxydt'
        echo ""
        echo -e "\033[1;32PROXY DT ACTIVADO CON ÉXITO\033[1;33m"
        
        fun_socks
    fi





elif [[ "$resposta" = '6' ]]; then
    if ps x | grep -w open.py | grep -v grep 1>/dev/null 2>/dev/null; then
        clear
        echo -e "\E[41;1;37m            SOCKS OPENVPN             \E[0m"
        echo ""
        fun_socksopenoff() {
            for pidproxy in $(screen -list | grep -w "openpy" | awk {'print $1'}); do
                screen -r -S "$pidproxy" -X quit
            done
            [[ $(grep -wc "open.py" /etc/autostart) != '0' ]] && {
                sed -i '/open.py/d' /etc/autostart
            }
            sleep 1
            screen -wipe >/dev/null
        }
        echo -e "\033[1;32mDESACTIVANDO EL SOCKS OPEN\033[1;33m"
        echo ""
        fun_bar 'fun_socksopenoff'
        echo ""
        echo -e "\033[1;32mSOCKS DESACTIVADO CON ÉXITO!\033[1;33m"
        sleep 2
        fun_socks
    else
        clear
        echo -e "\E[41;1;37m            SOCKS OPENVPN             \E[0m"
        echo ""
        echo -ne "\033[1;32mQUE PUERTO DESEA UTILIZAR \033[1;33m?\033[1;37m: "
        read porta
        [[ -z "$porta" ]] && {
            echo ""
            echo -e "\033[1;31mPuerto invalido!"
            sleep 2
            clear
            fun_conexao
        }
        verif_ptrs $porta
        fun_inisocksop() {
            [[ "$(netstat -tlpn | grep 'openvpn' | wc -l)" != '0' ]] && {
                listoldop=$(grep -w 'DEFAULT_HOST =' /etc/SSHPlus/open.py | cut -d"'" -f2 | cut -d: -f2)
                listopen=$(netstat -tlpn | grep -w openvpn | grep -v 127.0.0.1 | awk {'print $4'} | cut -d: -f2)
                sed -i "s/$listoldop/$listopen/" /etc/SSHPlus/open.py
            }
            sleep 1
            screen -dmS openpy python /etc/SSHPlus/open.py $porta
            [[ $(grep -wc "open.py" /etc/autostart) = '0' ]] && {
                echo -e "netstat -tlpn | grep -w $porta > /dev/null || { screen -r -S 'openpy' -X quit; screen -dmS openpy python /etc/SSHPlus/open.py $porta; }" >>/etc/autostart
            } || {
                sed -i '/open.py/d' /etc/autostart
                echo -e "netstat -tlpn | grep -w $porta > /dev/null || { screen -r -S 'openpy' -X quit; screen -dmS openpy python /etc/SSHPlus/open.py $porta; }" >>/etc/autostart
            }
        }
        echo ""
        echo -e "\033[1;32mINICIANDO EL SOCKS OPENVPN\033[1;33m"
        echo ""
        fun_bar 'fun_inisocksop'
        echo ""
        echo -e "\033[1;32mSOCKS OPENVPN ACTIVADO CON ÉXITO\033[1;33m"
        sleep 3
        fun_socks
    fi
		elif [[ "$resposta" = '7' ]]; then
			if ps x | grep proxy.py | grep -v grep 1>/dev/null 2>/dev/null; then
				sockspt=$(netstat -nplt | grep 'python3' | awk {'print $4'} | cut -d: -f2 | xargs)
				clear
				echo -e "\E[44;1;37m            PROXY SOCKS             \E[0m"
				echo ""
				echo -e "\033[1;33mPUERTOS EN USO: \033[1;32m$sockspt"
				echo ""
				echo -ne "\033[1;32mQUE PUERTO DESEA UTILIZAR \033[1;33m?\033[1;37m: "
				read porta
				[[ -z "$porta" ]] && {
					echo ""
					echo -e "\033[1;31mPuerto invalido!"
					sleep 2
					clear
					fun_conexao
				}
				verif_ptrs $porta
				echo ""
				echo -e "\033[1;32mINICIANDO EL PROXY SOCKS NA PORTA \033[1;31m$porta\033[1;33m"
				echo ""
				abrirptsks() {
					sleep 1
					screen -dmS proxy python3 /etc/SSHPlus/proxy.py $porta
					sleep 1
				}
				fun_bar 'abrirptsks'
				echo ""
				echo -e "\033[1;32mPROXY SOCKS ACTIVADO CON ÉXITO\033[1;33m"
				sleep 2
				fun_socks
			else
				clear
				echo -e "\033[1;31mFUNCION INDISPONIBLE\n\n\033[1;33mACTIVE EL SOCKS PRIMERO !\033[1;33m"
				sleep 2
				fun_socks
			fi
		elif [[ "$resposta" = '8' ]]; then
			if ps x | grep -w proxy.py | grep -v grep 1>/dev/null 2>/dev/null; then
				clear
				msgsocks=$(cat /etc/SSHPlus/proxy.py | grep -E "MSG =" | awk -F = '{print $2}' | cut -d "'" -f 2)
				echo -e "\E[44;1;37m             PROXY SOCKS              \E[0m"
				echo ""
				echo -e "\033[1;33mSTATUS: \033[1;32m$msgsocks"
				echo""
				echo -ne "\033[1;32mINFORME SU STATUS\033[1;31m:\033[1;37m "
				read msgg
				[[ -z "$msgg" ]] && {
					echo -e "\n\033[1;31mStatus invalido!"
					sleep 2
					fun_conexao
				}
				[[ ${msgg} != ?(+|-)+([a-zA-Z0-9-. ]) ]] && {
					echo -e "\n\033[1;31m[\033[1;33m!\033[1;31m]\033[1;33m EVITE CARACTERES ESPECIALES\033[0m"
					sleep 2
					fun_socks
				}
				echo -e "\n\033[1;31m[\033[1;36m01\033[1;31m]\033[1;33m AZUL"
				echo -e "\033[1;31m[\033[1;36m02\033[1;31m]\033[1;33m VERDE"
				echo -e "\033[1;31m[\033[1;36m03\033[1;31m]\033[1;33m ROJO"
				echo -e "\033[1;31m[\033[1;36m04\033[1;31m]\033[1;33m AMARILLO"
				echo -e "\033[1;31m[\033[1;36m05\033[1;31m]\033[1;33m ROSA"
				echo -e "\033[1;31m[\033[1;36m06\033[1;31m]\033[1;33m CYANO"
				echo -e "\033[1;31m[\033[1;36m07\033[1;31m]\033[1;33m NARANJA"
				echo -e "\033[1;31m[\033[1;36m08\033[1;31m]\033[1;33m ROJO"
				echo -e "\033[1;31m[\033[1;36m09\033[1;31m]\033[1;33m NEGRO"
				echo -e "\033[1;31m[\033[1;36m10\033[1;31m]\033[1;33m SIN COLOR"
				echo ""
				echo -ne "\033[1;32mQUE COLOR\033[1;31m ?\033[1;37m : "
				read sts_cor
				if [[ "$sts_cor" = "1" ]] || [[ "$sts_cor" = "01" ]]; then
					cor_sts='blue'
				elif [[ "$sts_cor" = "2" ]] || [[ "$sts_cor" = "02" ]]; then
					cor_sts='green'
				elif [[ "$sts_cor" = "3" ]] || [[ "$sts_cor" = "03" ]]; then
					cor_sts='red'
				elif [[ "$sts_cor" = "4" ]] || [[ "$sts_cor" = "04" ]]; then
					cor_sts='yellow'
				elif [[ "$sts_cor" = "5" ]] || [[ "$sts_cor" = "05" ]]; then
					cor_sts='#F535AA'
				elif [[ "$sts_cor" = "6" ]] || [[ "$sts_cor" = "06" ]]; then
					cor_sts='cyan'
				elif [[ "$sts_cor" = "7" ]] || [[ "$sts_cor" = "07" ]]; then
					cor_sts='#FF7F00'
				elif [[ "$sts_cor" = "8" ]] || [[ "$sts_cor" = "08" ]]; then
					cor_sts='#9932CD'
				elif [[ "$sts_cor" = "9" ]] || [[ "$sts_cor" = "09" ]]; then
					cor_sts='black'
				elif [[ "$sts_cor" = "10" ]]; then
					cor_sts='null'
				else
					echo -e "\n\033[1;33mOPCION INVALIDA !"
					cor_sts='null'
				fi
				fun_msgsocks() {
					msgsocks2=$(cat /etc/SSHPlus/proxy.py | grep "MSG =" | awk -F = '{print $2}')
					sed -i "s/$msgsocks2/ '$msgg'/g" /etc/SSHPlus/proxy.py
					sleep 1
					cor_old=$(grep 'color=' /etc/SSHPlus/proxy.py | cut -d '"' -f2)
					sed -i "s/\b$cor_old\b/$cor_sts/g" /etc/SSHPlus/proxy.py
				}
				echo ""
				echo -e "\033[1;32mALTERANDO STATUS!"
				echo ""
				fun_bar 'fun_msgsocks'
				restartsocks() {
					if ps x | grep proxy.py | grep -v grep 1>/dev/null 2>/dev/null; then
						echo -e "$(netstat -nplt | grep 'python3' | awk {'print $4'} | cut -d: -f2 | xargs)" >/tmp/Pt_sks
						for pidproxy in $(screen -ls | grep ".proxy" | awk {'print $1'}); do
							screen -r -S "$pidproxy" -X quit
						done
						screen -wipe >/dev/null
						_Ptsks="$(cat /tmp/Pt_sks)"
						sleep 1
						screen -dmS proxy python3 /etc/SSHPlus/proxy.py $_Ptsks
						rm /tmp/Pt_sks
					fi
                }
				echo ""
				echo -e "\033[1;32mREINICIANDO PROXY SOCKS!"
				echo ""
				fun_bar 'restartsocks'
				echo ""
				echo -e "\033[1;32mSTATUS ALTERADO CON ÉXITO!"
				sleep 2
				fun_socks
			else
				clear
				echo -e "\033[1;31mFUNCION INDISPONIBLE\n\n\033[1;33mACTIVE EL SOCKS SSH PRIMERO !\033[1;33m"
				sleep 2
				fun_socks
			fi
        		elif [[ "$resposta" = '9' ]]; then
			if ps x | grep -w wsproxy.py | grep -v grep 1>/dev/null 2>/dev/null; then
				clear
				msgsocks=$(cat /etc/SSHPlus/wsproxy.py | grep -E "MSG =" | awk -F = '{print $2}' | cut -d "'" -f 2)
				echo -e "\E[44;1;37m             WEBSOCKET              \E[0m"
				echo ""
				echo -e "\033[1;33mSTATUS: \033[1;32m$msgsocks"
				echo""
				echo -ne "\033[1;32mINFORME SU STATUS\033[1;31m:\033[1;37m "
				read msgg
				[[ -z "$msgg" ]] && {
					echo -e "\n\033[1;31mStatus invalido!"
					sleep 2
					fun_conexao
				}
				[[ ${msgg} != ?(+|-)+([a-zA-Z0-9-. ]) ]] && {
					echo -e "\n\033[1;31m[\033[1;33m!\033[1;31m]\033[1;33m EVITE CARACTERES ESPECIALES\033[0m"
					sleep 2
					fun_socks
				}
				echo -e "\n\033[1;31m[\033[1;36m01\033[1;31m]\033[1;33m AZUL"
				echo -e "\033[1;31m[\033[1;36m02\033[1;31m]\033[1;33m VERDE"
				echo -e "\033[1;31m[\033[1;36m03\033[1;31m]\033[1;33m ROJO"
				echo -e "\033[1;31m[\033[1;36m04\033[1;31m]\033[1;33m AMARILLO"
				echo -e "\033[1;31m[\033[1;36m05\033[1;31m]\033[1;33m ROSA"
				echo -e "\033[1;31m[\033[1;36m06\033[1;31m]\033[1;33m CYANO"
				echo -e "\033[1;31m[\033[1;36m07\033[1;31m]\033[1;33m LARANJA"
				echo -e "\033[1;31m[\033[1;36m08\033[1;31m]\033[1;33m ROJO"
				echo -e "\033[1;31m[\033[1;36m09\033[1;31m]\033[1;33m NEGRO"
				echo -e "\033[1;31m[\033[1;36m10\033[1;31m]\033[1;33m SIN COLOR"
				echo ""
				echo -ne "\033[1;32mQUE COLOR\033[1;31m ?\033[1;37m : "
				read sts_cor
				if [[ "$sts_cor" = "1" ]] || [[ "$sts_cor" = "01" ]]; then
					cor_sts='blue'
				elif [[ "$sts_cor" = "2" ]] || [[ "$sts_cor" = "02" ]]; then
					cor_sts='green'
				elif [[ "$sts_cor" = "3" ]] || [[ "$sts_cor" = "03" ]]; then
					cor_sts='red'
				elif [[ "$sts_cor" = "4" ]] || [[ "$sts_cor" = "04" ]]; then
					cor_sts='yellow'
				elif [[ "$sts_cor" = "5" ]] || [[ "$sts_cor" = "05" ]]; then
					cor_sts='#F535AA'
				elif [[ "$sts_cor" = "6" ]] || [[ "$sts_cor" = "06" ]]; then
					cor_sts='cyan'
				elif [[ "$sts_cor" = "7" ]] || [[ "$sts_cor" = "07" ]]; then
					cor_sts='#FF7F00'
				elif [[ "$sts_cor" = "8" ]] || [[ "$sts_cor" = "08" ]]; then
					cor_sts='#9932CD'
				elif [[ "$sts_cor" = "9" ]] || [[ "$sts_cor" = "09" ]]; then
					cor_sts='black'
				elif [[ "$sts_cor" = "10" ]]; then
					cor_sts='null'
				else
					echo -e "\n\033[1;33mOPCION INVALIDA !"
					cor_sts='null'
				fi
				fun_msgsocks() {
					msgsocks2=$(cat /etc/SSHPlus/wsproxy.py | grep "MSG =" | awk -F = '{print $2}')
					sed -i "s/$msgsocks2/ '$msgg'/g" /etc/SSHPlus/wsproxy.py
					sleep 1
					cor_old=$(grep 'color=' /etc/SSHPlus/wsproxy.py | cut -d '"' -f2)
					sed -i "s/\b$cor_old\b/$cor_sts/g" /etc/SSHPlus/wsproxy.py
				}
				echo ""
				echo -e "\033[1;32mALTERANDO STATUS!"
				echo ""
				fun_bar 'fun_msgsocks'
                restartwssocks() {
                    if ps x | grep wsproxy.py | grep -v grep 1>/dev/null 2>/dev/null; then
						echo -e "$(netstat -nplt | grep 'python3' | awk {'print $4'} | cut -d: -f2 | xargs)" >/tmp/Pt_wssks
						for pidproxy in $(screen -ls | grep ".ws" | awk {'print $1'}); do
							screen -r -S "$pidproxy" -X quit
						done
						screen -wipe >/dev/null
						_Ptwssks="$(cat /tmp/Pt_wssks)"
						sleep 1
						screen -dmS ws python3 /etc/SSHPlus/wsproxy.py $_Ptwssks
						rm /tmp/Pt_wssks
					fi
				}
				echo ""
				echo -e "\033[1;32mREINICIANDO WEBSOCKET!"
				echo ""
				fun_bar 'restartwssocks'
				echo ""
				echo -e "\033[1;32mSTATUS ALTERADO CON ÉXITO!"
				sleep 2
				fun_socks
			else
				clear
				echo -e "\033[1;31mFUNCION INDISPONIBLE\n\n\033[1;33mACTIVE EL WEBSOCKET PRIMERO !\033[1;33m"
				sleep 2
				fun_socks
			fi
		elif [[ "$resposta" = '0' ]]; then
			echo ""
			echo -e "\033[1;31mRetornando...\033[0m"
			sleep 1
			fun_conexao
		else
			echo ""
			echo -e "\033[1;31mOpcion invalida !\033[0m"
			sleep 1
			fun_socks
		fi

	}

	fun_openssh() {
		clear
		echo -e "\E[44;1;37m            OPENSSH             \E[0m\n"
		echo -e "\033[1;31m[\033[1;36m1\033[1;31m] \033[1;37m• \033[1;33mAGREGAR PUERTO\033[1;31m
[\033[1;36m2\033[1;31m] \033[1;37m• \033[1;33mREMOVER PUERTO\033[1;31m
[\033[1;36m3\033[1;31m] \033[1;37m• \033[1;33VOLVER\033[0m"
		echo ""
		echo -ne "\033[1;32mQUE DESEA HACER \033[1;33m?\033[1;37m "
		read resp
		if [[ "$resp" = '1' ]]; then
			clear
			echo -e "\E[44;1;37m         AGREGAR PUERTO AL SSH         \E[0m\n"
			echo -ne "\033[1;32mQUE PUERTO DESEA AGREGAR \033[1;33m?\033[1;37m "
			read pt
			[[ -z "$pt" ]] && {
				echo -e "\n\033[1;31mPuerto invalido!"
				sleep 3
				fun_conexao
			}
			verif_ptrs $pt
			echo -e "\n\033[1;32mAGREGANDO PUERTO AL SSH\033[0m"
			echo ""
			fun_addpssh() {
				echo "Port $pt" >>/etc/ssh/sshd_config
				service ssh restart
			}
			fun_bar 'fun_addpssh'
			echo -e "\n\033[1;32mPUERTO AGREGADO CON ÉXITO\033[0m"
			sleep 3
			fun_conexao
		elif [[ "$resp" = '2' ]]; then
			clear
			echo -e "\E[41;1;37m         REMOVER PUERTO DEL SSH         \E[0m"
			echo -e "\n\033[1;33m[\033[1;31m!\033[1;33m] \033[1;32mPUERTO ESTÁNDAR \033[1;37m22 \033[1;33mCUIDADO !\033[0m"
			echo -e "\n\033[1;33mPUERTOS EN USO: \033[1;37m$(grep 'Port' /etc/ssh/sshd_config | cut -d' ' -f2 | grep -v 'no' | xargs)\n"
			echo -ne "\033[1;32mQUE PUERTO DESEA REMOVER \033[1;33m?\033[1;37m "
			read pt
			[[ -z "$pt" ]] && {
				echo -e "\n\033[1;31mPuerto invalido!"
				sleep 2
				fun_conexao
			}
			[[ $(grep -wc "$pt" '/etc/ssh/sshd_config') != '0' ]] && {
				echo -e "\n\033[1;32mREMOVIENDO PUERTO DEL SSH\033[0m"
				echo ""
				fun_delpssh() {
					sed -i "/Port $pt/d" /etc/ssh/sshd_config
					service ssh restart
				}
				fun_bar 'fun_delpssh'
				echo -e "\n\033[1;32mPUERTO REMOVIDO CON ÉXITO\033[0m"
				sleep 2
				fun_conexao
			} || {
				echo -e "\n\033[1;31mPuerto invalido!"
				sleep 2
				fun_conexao
			}
		elif [[ "$resp" = '3' ]]; then
			echo -e "\n\033[1;31mRetornando.."
			sleep 2
			fun_conexao
		else
			echo -e "\n\033[1;31mOpcion invalida!"
			sleep 2
			fun_conexao
		fi
	}

	fun_sslh() {
    [[ "$(netstat -nltp | grep 'sslh' | wc -l)" = '0' ]] && {
        clear
        echo -e "\033[44;1;37m             INSTALADOR SSLH               \033[0m\n"
        echo -e "\n\033[1;33m[\033[1;31m!\033[1;33m] \033[1;32mEL PUERTO \033[1;37m443 \033[1;32mSERÁ USADO POR DEFECTO\033[0m\n"
        echo -ne "\033[1;32mDESEA REALMENTE INSTALAR EL SSLH \033[1;31m? \033[1;33m[s/n]:\033[1;37m "
        read -r resp

        [[ "$resp" = 's' ]] && {
            verif_ptrs 443
            fun_instsslh() {
                # Variáveis para as portas
                [[ -e "/etc/stunnel/stunnel.conf" ]] && ptssl="$(netstat -nplt | grep 'stunnel' | awk '{print $4}' | cut -d: -f2 | xargs)" || ptssl='3128'
                [[ -e "/etc/openvpn/server.conf" ]] && ptvpn="$(netstat -nplt | grep 'openvpn' | awk '{print $4}' | cut -d: -f2 | xargs)" || ptvpn='1194'
                
                # Instalar dependências para compilação
                apt-get update
                apt-get install -y build-essential libwrap0-dev libssl-dev libconfig8-dev git

                # Baixar e compilar a versão mais recente do SSLH
                cd /tmp || exit
                git clone https://github.com/yrutschle/sslh.git
                cd sslh || exit
                make

                # Instalar SSLH
                make install

                # Configurar o SSLH
                echo -e "#Modo autônomo\n\nRUN=yes\n\nDAEMON=/usr/local/sbin/sslh\n\nDAEMON_OPTS='--user sslh --listen 0.0.0.0:443 --ssh 127.0.0.1:22 --ssl 127.0.0.1:$ptssl --http 127.0.0.1:80 --openvpn 127.0.0.1:$ptvpn --pidfile /var/run/sslh/sslh.pid'" >/etc/default/sslh
                /etc/init.d/sslh start && service sslh start
            }
            
            echo -e "\n\033[1;32mINSTALANDO UNA VERSION MAS RECIENTE DEL SSLH...\033[0m\n"
            fun_bar 'fun_instsslh'
            echo -e "\n\033[1;32mINICIANDO EL SSLH...\033[0m\n"
            fun_bar '/etc/init.d/sslh restart && service sslh restart'

            if [[ $(netstat -nplt | grep -w 'sslh' | wc -l) != '0' ]]; then
                echo -e "\n\033[1;32mINSTALADO CON ÉXITO!\033[0m"
            else
                echo -e "\n\033[1;31mERROR INESPERADO AL INSTALAR!\033[0m"
            fi
            sleep 3
            fun_conexao
        } || {
            echo -e "\n\033[1;31mRETORNANDO...\033[0m"
            sleep 2
            fun_conexao
        }
    } || {
        clear
        echo -e "\033[41;1;37m             REMOVER O SSLH               \033[0m\n"
        echo -ne "\033[1;32mDESEA REALMENTE REMOVER EL SSLH \033[1;31m? \033[1;33m[s/n]:\033[1;37m "
        read -r respo

        [[ "$respo" = "s" ]] && {
            fun_delsslh() {
                /etc/init.d/sslh stop && service sslh stop
                apt-get remove sslh -y
                apt-get purge sslh -y
            }
            echo -e "\n\033[1;32mREMOVIENDO EL SSLH...\033[0m\n"
            fun_bar 'fun_delsslh'
            echo -e "\n\033[1;32mREMOVIDO CON ÉXITO!\033[0m\n"
            sleep 2
            fun_conexao
        } || {
            echo -e "\n\033[1;31mRETORNANDO...\033[0m"
            sleep 2
            fun_conexao
        }
    }
}

	x="ok"
	fun_conexao() {
		while true $x != "ok"; do
			[[ ! -e '/home/sshplus' ]] && exit 0
			clear
system=$(cat /etc/issue.net)
date=$(date '+%Y-%m-%d <> %H:%M:%S')
echo -e "\033[1;37m $system         $date"
echo -e "\033[01;31m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\033[0m"
echo -e "\033[01;31m┃\033[1;31m\033[5;34;47m                🛸 CONEXION 🛸                     \033[1;33m \033[0m\033[01;31m┃"
echo -e "\033[01;31m┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\033[0m"
			        echo -e "\033[01;31m┃\033[1;32mSERVICIO: \033[1;33mOPENSSH \033[1;32mPUERTO: \033[1;37m$(grep 'Port' /etc/ssh/sshd_config | cut -d' ' -f2 | grep -v 'no' | xargs)\033[01;31m                       \033[0m" && sts6="\033[1;32m◉ "
			[[ "$(netstat -tlpn | grep 'docker' | wc -l)" != '0' ]] && {
				echo -e "\033[01;31m┃\033[1;32mSERVICIO: \033[1;33mCHISEL: \033[1;32mPUERTO: \033[1;37m$(netstat -nplt | grep 'docker' | awk {'print $4'} | cut -d: -f2 | xargs)\033[01;31m                       \033[0m"
				sts8="\033[1;32m◉ "
			} || {
				sts8="\033[1;31m○ "
			}
			[[ "$(ps x | grep 'slowdns' | grep -v 'grep'|wc -l)" != '0' ]] && {
				sts9="\033[1;32m◉ "
			} || {
				sts9="\033[1;31m○ "
			}            
			[[ "$(netstat -tlpn | grep 'sslh' | wc -l)" != '0' ]] && {
				echo -e "\033[01;31m┃\033[1;32mSERVICIO: \033[1;33mSSLH: \033[1;32mPUERTO: \033[1;37m$(netstat -nplt | grep 'sslh' | awk {'print $4'} | cut -d: -f2 | xargs)\033[01;31m                       \033[0m"
				sts7="\033[1;32m◉ "
			} || {
				sts7="\033[1;31m○ "
			}
			[[ "$(netstat -tlpn | grep 'openvpn' | wc -l)" != '0' ]] && {
				echo -e "\033[01;31m┃\033[1;32mSERVICIO: \033[1;33mOPENVPN: \033[1;32mPUERTO: \033[1;37m$(netstat -nplt | grep 'openvpn' | awk {'print $4'} | cut -d: -f2 | xargs)\033[01;31m                       \033[0m"
				sts10="\033[1;32m◉ "
			} || {
				sts10="\033[1;31m○ "
			}
			[[ "$(netstat -tlpn | grep 'python3' | wc -l)" != '0' ]] && {
				echo -e "\033[01;31m┃\033[1;32mSERVICIO: \033[1;33mPROXY SOCKS \033[1;32mPUERTO: \033[1;37m$(netstat -nplt | grep 'python3' | awk {'print $4'} | cut -d: -f2 | xargs)\033[01;31m                       \033[0m"
				sts4="\033[1;32m◉ "
			} || {
				sts4="\033[1;31m○ "
			}
			[[ "$(netstat -tlpn | grep 'WebSocket' | wc -l)" != '0' ]] && {
				echo -e "\033[01;31m┃\033[1;32mSERVICIO: \033[1;33mWEBSOCKET SECURITY \033[1;32mPUERTO: \033[1;37m"$(cat /etc/mamalista)"\033[01;31m                       \033[0m"
				sts4="\033[1;32m◉ "
			} || {
				sts4="\033[1;31m○ "
			}
                        [[ "$(netstat -tlpn | grep 'security' | wc -l)" != '0' ]] && {
                                porta_security=$(netstat -nplt | grep -w 'security' | awk '{split($4,a,":"); print a[length(a)]}')
                                echo -e "\033[01;31m┃\033[1;32mSERVICIO: \033[1;33mWEBSOCKET SECURITY-V2.0 \033[1;32mPUERTO: \033[1;37m$porta_security"
                                sts4="\033[1;32m◉ "
                        } || {
                                sts4="\033[1;31m○ "
                        }
			[[ "$(netstat -tlpn | grep 'proxy' | wc -l)" != '0' ]] && {
				echo -e "\033[01;31m┃\033[1;32mSERVICIO: \033[1;33mMULTI-PROXY \033[1;32mPUERTO: \033[1;37m$(netstat -nplt | grep 'proxy' | awk {'print $5'} | cut -d: -f2 | xargs)"
				sts0="\033[1;32m◉ "
			} || {
				sts0="\033[1;31m○ "
			}
                        [[ "$(netstat -tlpn | grep 'proxydt' | wc -l)" != '0' ]] && {
				echo -e "\033[01;31m┃\033[1;32mSERVICIO: \033[1;33mPROXY DTUNNEL-MOD-V2.0 \033[1;32mPUERTO: \033[1;37m$(netstat -nplt | grep 'proxydt' | awk {'print $4'} | cut -d: -f2 | xargs)"
				sts4="\033[1;32m◉ "
			} || {
				sts4="\033[1;31m○ "
			}
			[[ -e "/etc/stunnel/stunnel.conf" ]] && {
				echo -e "\033[01;31m┃\033[1;32mSERVICIO: \033[1;33mSSL TUNNEL \033[1;32mPUERTO: \033[1;37m$(netstat -nplt | grep 'stunnel' | awk {'print $4'} | cut -d: -f2 | xargs)\033[01;31m                       \033[0m"
				sts3="\033[1;32m◉ "
			} || {
				sts3="\033[1;31m○ "
			}
			[[ "$(netstat -tlpn | grep 'dropbear' | wc -l)" != '0' ]] && {
				echo -e "\033[01;31m\033[1;32mSERVICIO: \033[1;33mDROPBEAR \033[1;32mPUERTO: \033[1;37m$(netstat -nplt | grep 'dropbear' | awk -F ":" {'print $4'} | xargs)\033[01;31m                       \033[0m"
				sts2="\033[1;32m◉ "
			} || {
				sts2="\033[1;31m○ "
			}
                        [[ "$(netstat -tlpn | grep 'proxy' | wc -l)" != '0' ]] && {
				echo -e "\033[01;31m┃\033[1;32mSERVICIO: \033[1;33mPROXY DTUNNEL \033[1;32mPUERTO: \033[1;37m$(netstat -nplt | grep 'proxy' | awk {'print $4'} | cut -d: -f2 | xargs)"
				sts11="\033[1;32m◉ "
			} || {
				sts11="\033[1;31m○ "
			}
			[[ "$(netstat -tlpn | grep 'squid' | wc -l)" != '0' ]] && {
				echo -e "\033[01;31m┃\033[1;32mSERVICIO: \033[1;33mSQUID \033[1;32mPUERTO: \033[1;37m$(netstat -nplt | grep 'squid' | awk -F ":" {'print $4'} | xargs)\033[01;31m                       \033[0m"
				sts1="\033[1;32m◉ "
			} || {
				sts1="\033[1;31m○ "
			}
			[[ "$(netstat -tunlp | grep 'trojan-go' | wc -l)" != '0' ]] && {
				trojansts="\033[1;32m◉ "
			} || {
				trojansts="\033[1;31m○ "
			}
			[[ "$(netstat -tunlp | grep 'v2ray' | wc -l)" != '0' ]] && {
				xv2ray="\033[1;32m◉ "
			} || {
				xv2ray="\033[1;31m○ "
			}
			echo -e "\033[01;31m┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\033[0m"         
			echo -e "\033[01;31m┃\033[1;31m\033[1;34m[\033[1;37m 01 •\033[1;34m]\033[1;37m ➩  \033[1;33mOPENSSH $sts6\033[0;31m                              \033[01;31m┃"
echo -e "\033[01;31m┃\033[1;31m\033[1;34m[\033[1;37m 02 •\033[1;34m]\033[1;37m ➩  \033[1;33mSQUID PROXY $sts1\033[0;31m                          \033[01;31m┃"
echo -e "\033[01;31m┃\033[1;31m\033[1;34m[\033[1;37m 03 •\033[1;34m]\033[1;37m ➩  \033[1;33mDROPBEAR $sts2\033[0;31m                             \033[01;31m┃"
echo -e "\033[01;31m┃\033[1;31m\033[1;34m[\033[1;37m 04 •\033[1;34m]\033[1;37m ➩  \033[1;33mOPENVPN $sts10\033[0;31m                              \033[01;31m┃"
echo -e "\033[01;31m┃\033[1;31m\033[1;34m[\033[1;37m 05 •\033[1;34m]\033[1;37m ➩  \033[1;33mPROXY SOCKS $sts4\033[0;31m                          \033[01;31m┃"
echo -e "\033[01;31m┃\033[1;31m\033[1;34m[\033[1;37m 06 •\033[1;34m]\033[1;37m ➩  \033[1;33mMULTI-PROXY 2025 $sts0\033[0;31m                     \033[01;31m┃"
echo -e "\033[01;31m┃\033[1;31m\033[1;34m[\033[1;37m 07 •\033[1;34m]\033[1;37m ➩  \033[1;33mPROXY DTUNNEL-MOD $sts11\033[0;31m                    \033[01;31m┃"
echo -e "\033[01;31m┃\033[1;31m\033[1;34m[\033[1;37m 08 •\033[1;34m]\033[1;37m ➩  \033[1;33mSSL TUNNEL  $sts3\033[0;31m                          \033[01;31m┃"
echo -e "\033[01;31m┃\033[1;31m\033[1;34m[\033[1;37m 09 •\033[1;34m]\033[1;37m ➩  \033[1;33mSLOWDNS $sts9\033[0;31m                              \033[01;31m┃"
echo -e "\033[01;31m┃\033[1;31m\033[1;34m[\033[1;37m 10 •\033[1;34m]\033[1;37m ➩  \033[1;33mV2RAY $xv2ray\033[0;31m                                \033[01;31m┃"
echo -e "\033[01;31m┃\033[1;31m\033[1;34m[\033[1;37m 11 •\033[1;34m]\033[1;37m ➩  \033[1;33mTROJAN-GO $trojansts\033[0;31m                            \033[01;31m┃"
echo -e "\033[01;31m┃\033[1;31m\033[1;34m[\033[1;37m 12 •\033[1;34m]\033[1;37m ➩  \033[1;33mLIMPIAR V2RAY \033[0;31m                           \033[01;31m┃"
echo -e "\033[01;31m┃\033[1;31m\033[1;34m[\033[1;37m 13 •\033[1;34m]\033[1;37m ➩  \033[1;33mMENU APACHE  \033[0;31m                           \033[01;31m┃"
echo -e "\033[01;31m┃\033[1;31m\033[1;34m[\033[1;37m 14 •\033[1;34m]\033[1;37m ➩  \033[1;33VOLVER  \033[1;32m<\033[1;33m<\033[1;31m< \033[0;31m                            \033[01;31m┃"
echo -e "\033[01;31m┃\033[1;31m\033[1;34m[\033[1;37m 00 •\033[1;34m]\033[1;37m ➩  \033[1;33mSALIR  \033[1;32m<\033[1;33m<\033[1;31m< \033[0;31m                              \033[01;31m┃" 
			echo -e "\033[01;31m┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\033[0m"
			tput civis
			echo -ne "\033[1;31m┗━━━➤\033[1;32mESCOJA UNA OPCIÓN\033[1;33m\033[1;31m\033[1;37m : ";
			read x
			tput cnorm
			clear
			case $x in
			1 | 01)
			fun_openssh
			;;
			2 | 02)
			fun_squid
			;;
			3 | 03)
			fun_drop
			;;
			4 | 04)
			fun_openvpn
			;;
			5 | 05)
			fun_socks
			;;
                        6 | 06)
			rustyproxy
			;;
			7 | 07) 
			mainproxy
			;;
			8 | 08)
			inst_ssl
			;;
			9 | 09)
			tput reset
			clear
			slow_setup
			;;
			10)
			v2raymanager
			;;
			11)
			trojan-go
			;;
			12)
			echo -e "\E[44;1;37m             LIMPIAR V2RAY              \E[0m"
			echo -e "\033[1;31mESTA FUNCIÓN ES PARA LIBERAR MEMORIA DE DISCO COMO MEMORIA RAM \033[1;33m \033[1;32\033[0m"
			echo -e "\033[1;31m Ten en cuenta que al ejecutarlo, si tuvieras estadísticas de consumo, \033[1;33m \033[1;32\033[0m"
			echo -e "\033[1;31se restablecerá, no hay pérdida de configuración ni de usuario.\033[1;33m \033[1;32\033[0m"
			v2ray clean
			echo -ne "\n\033[1;31mENTER \033[1;33mpara retornar al \033[1;32mMENU!\033[0m"; read
			;;
			13)
			clear
			apache2menu
			;;
			14)
			clear
			menu
			;;
			0 | 00)
			clear
			menu
			;;
			*)
			echo -e "\033[1;31mOpcion invalida !\033[0m"
			sleep 2
			;;
			esac
		done
	}
	fun_conexao
}
