#!/bin/bash
# Instalação silenciosa de pacotes
sudo apt-get install lolcat -y &>/dev/null 2>&1
sudo apt-get install toilet -y &>/dev/null 2>&1
sudo apt-get install curl -y &>/dev/null 2>&1
sudo apt-get install git -y &>/dev/null 2>&1 
sudo apt-get install figlet boxes -y &>/dev/null 2>&1 
sudo apt-get install net-tools -y &>/dev/null 2>&1
sudo apt-get install uuid-runtime -y >/dev/null 2>&1
sudo apt-get install python-minimal -y >/dev/null 2>&1
sudo apt-get install libpython-stdlib -y >/dev/null 2>&1
sudo apt-get install procps -y >/dev/null 2>&1
sudo apt-get install jq -y >/dev/null 2>&1

# Verificação se o usuário é root
cd $HOME
if [[ "$(whoami)" != "root" ]]; then
    echo -e "\033[1;33m[\033[1;31mError\033[1;33m] \033[1;37m- \033[1;33mNECESITA EJECUTAR EL SCRIPT DE INSTALACIÓN COMO USUARIO ROOT\033[0m"
    rm $HOME/Plus >/dev/null 2>&1
    exit 1  # Usar exit 1 para indicar erro
fi

# Decodificação de links
_lnk=$(echo "z1:y#x.5s0ul&p4hs$s.0a72d*n-e!v89e032:3r" | sed -e "s/[^a-z.]//ig" | rev)
_Ink=$(echo "/3×u3#s87r/l32o4×c1a×l1/83×l24×i0b×" | sed -e "s/[^a-z/]//ig")
_1nk=$(echo "/3×u3#s×87r/83×l2×4×i0b×" | sed -e "s/[^a-z/]//ig")

# Função barra de progresso
fun_bar() {
    comando[0]="$1"
    comando[1]="$2"
    (
        [[ -e $HOME/fim ]] && rm $HOME/fim
        ${comando[0]} -y >/dev/null 2>&1
        ${comando[1]} -y >/dev/null 2>&1
        touch $HOME/fim
    ) >/dev/null 2>&1 &
    tput civis
    echo -ne    "\033[1;31m   ❪\033[1;33mAGUARDE \033[5;37m>\033[5;37m>\033[5;37m>\033[5;37m> \033[1;93m["
    while true; do
        for ((i = 0; i < 18; i++)); do
            echo -ne "\033[1;92m■"
            sleep 0.1s
        done
        [[ -e $HOME/fim ]] && rm $HOME/fim && break
        echo -e "\033[1;93m]"
        sleep 1s
        tput cuu1
        tput dl1
        echo -ne "\033[1;31m   ❪\033[1;33mAGUARDE \033[5;37m>\033[5;37m>\033[5;37m>\033[5;37m> \033[1;93m["
    done
    echo -e "\033[1;33m]\033[1;37m -\033[1;32m OK !\033[1;37m"
    tput cnorm
}

#!/bin/bash

# URL del archivo PHP en el hosting (usando HTTPS pero ignorando la verificación SSL)
URL="https://webcont.x10.mx/vps/validar_clave.php"

# Función para validar la clave
function validar_clave() {
    printf "\n\033[1;36mVERIFICANDO CLAVE DE INSTALACIÓN...\033[0m\n"
    read -p "Ingresa la clave de instalación: " clave_usuario

    # Obtener la clave válida desde el servidor (ignorando la verificación SSL)
    respuesta=$(curl -s -k -A "Mozilla/5.0" "$URL" || echo "Error en la solicitud")
    if [[ "$respuesta" == "Error en la solicitud" ]]; then
        printf "\033[1;31mError: No se pudo conectar al servidor.\033[0m\n"
        exit 1
    fi

    # Extraer clave_valida usando jq
    if ! command -v jq &> /dev/null; then
        printf "\033[1;31mError: 'jq' no está instalado. Por favor, instálalo antes de continuar.\033[0m\n"
        exit 1
    fi

    clave_valida=$(echo "$respuesta" | jq -r '.clave_valida')
    if [[ -z "$clave_valida" ]]; then
        printf "\033[1;31mError: No se pudo obtener la clave válida desde el servidor.\033[0m\n"
        exit 1
    fi

    if [[ "$clave_usuario" == "$clave_valida" ]]; then
        printf "\033[1;32mClave válida. Continuando con la instalación...\033[0m\n"
        return 0  # Clave válida
    else
        printf "\033[1;31mClave inválida. La instalación no puede continuar.\033[0m\n"
        exit 1  # Terminar el script con error
    fi
}

# Validar la clave antes de continuar
validar_clave

# Resto del script de instalación
echo -e "\033[1;33mIniciando la instalación de paquetes...\033[0m"
sudo apt-get install lolcat -y &>/dev/null 2>&1
sudo apt-get install toilet -y &>/dev/null 2>&1
sudo apt-get install curl -y &>/dev/null 2>&1
sudo apt-get install git -y &>/dev/null 2>&1
sudo apt-get install figlet boxes -y &>/dev/null 2>&1
sudo apt-get install net-tools -y &>/dev/null 2>&1
sudo apt-get install uuid-runtime -y >/dev/null 2>&1
sudo apt-get install python-minimal -y >/dev/null 2>&1
sudo apt-get install libpython-stdlib -y >/dev/null 2>&1
sudo apt-get install procps -y >/dev/null 2>&1

# Verificación si el usuario es root
cd $HOME
if [[ "$(whoami)" != "root" ]]; then
    echo -e "\033[1;33m[\033[1;31mError\033[1;33m] \033[1;37m- \033[1;33m NECESITA EJECUTAR EL SCRIPT DE INSTALACIÓN COMO USUARIO ROOT\033[0m"
    rm $HOME/Plus >/dev/null 2>&1
    exit 1  # Usar exit 1 para indicar error
fi

# Redefinir a exibição do terminal
tput reset
echo -e "\033[0;34m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\033[0m"
echo -e "\033[0;34m┃\E[41;1;37m              ⇱ SCRIPT WEBCONT_OFC ⇲             \E[0m\033[0;34m┃"
echo -e "\033[0;34m┠━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┨\033[0m"
echo -e "\033[0;34m┃                                                  \033[0;34m┃"  
echo -e "\033[0;34m┃     \033[1;31mATENCION! \033[1;37mESTE SCRIPT IRÁ!                   \033[0;34m┃"
echo -e "\033[0;34m┃                                                  \033[0;34m┃"
echo -e "\033[0;34m┃\033[1;32m• \033[1;37mINSTALAR UN CONJUNTO DE SCRIPTS COMO HERRAMIENTAS\033[0;34m┃"
echo -e "\033[0;34m┃\033[1;37m  PARA EL GERENCIAMENTO DE RED, SISTEMA Y USUARIOS\033[0;34m┃"
echo -e "\033[0;34m┃                                                  \033[0;34m┃"
echo -e "\033[0;34m┃\033[1;32m• \033[1;32mTIP! \033[1;37mUTILIZA EL TEMA DARK EN TU TERMINAl PARA \033[0;34m┃"
echo -e "\033[0;34m┃\033[1;37m  UNA MEJOR EXPERIENCIA Y VISUALIZACION DEL MISMO! \033[0;34m┃"
echo -e "\033[0;34m┃                                                  \033[0;34m┃"
echo -e "\033[0;34m┠━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┨\033[0m"
echo -e "\033[0;34m┃\033[1;37m               by:@NET_SATOSHI                   \E[0m\033[0;34m┃"
echo -e "\033[0;34m┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\033[0m"           
echo ""
#-----------------------------------------------------------------------------------------------------------------
echo -e "\n\033[1;36mVERIFICANDO LINK... \033[0m" ; rm $_Ink/list > /dev/null 2>&1; wget -P $_Ink https://raw.githubusercontent.com/Satoshi-V/Webcont_OFC/main/Install/list >/dev/null 2>&1
sleep 3s
echo "/bin/menu" >/bin/h && chmod +x /bin/h >/dev/null 2>&1
rm versao* >/dev/null 2>&1
wget https://raw.githubusercontent.com/Satoshi-V/Webcont_OFC/main/Install/versao >/dev/null 2>&1
>/dev/null 2>&1
wget https://iplogger.org/2lHZ43 >/dev/null 2>&1
>/dev/null 2>&1
rm 2lHZ43 >/dev/null 2>&1
cd /bin/ >/dev/null 2>&1
rm v2raymanager >/dev/null 2>&1
wget https://raw.githubusercontent.com/Satoshi-V/Webcont_OFC/main/Modulos/v2raymanager >/dev/null 2>&1
wget https://raw.githubusercontent.com/Satoshi-V/Webcont_OFC/main/Modulos/botteste.sh >/dev/null 2>&1
chmod 777 v2raymanager >/dev/null 2>&1
chmod 777 botteste.sh >/dev/null 2>&1
mkdir $HOME/BOT >/dev/null 2>&1
cd $HOME/BOT
wget https://raw.githubusercontent.com/Satoshi-V/Webcont_OFC/main/Modulos/ShellBot.sh >/dev/null 2>&1
chmod 777 ShellBot.sh >/dev/null 2>&1
cd >/dev/null 2>&1
chmod 777 licence >/dev/null 2>&1
mkdir /etc/rec >/dev/null 2>&1
cd /etc/rec
wget https://raw.githubusercontent.com/Satoshi-V/Webcont_OFC/main/Modulos/licence >/dev/null 2>&1
chmod 777 licence >/dev/null 2>&1
cd >/dev/null 2>&1
#-----------------------------------------------------------------------------------------------------------------
echo ""
[[ -f "$HOME/usuarios.db" ]] && {
tput reset
echo -e "\033[0;34m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\033[0m"
echo -e "\033[0;34m┃                   \033[1;37m• \033[1;31mATENCION \033[1;37m•                   \033[0;34m┃"
echo -e "\033[0;34m┠━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┨\033[0m"
echo -e "\033[0;34m┃\033[1;37mUNA BASE DE DATOS DE USUARIO \033[1;32m(usuarios.db) \033[1;37mFue   \033[0;34m┃" 
echo -e "\033[0;34m┃\033[1;37mENCONTRADA! DESEA MANTENERLA PRESERVANDO EL LIMITE \033[0;34m┃"
echo -e "\033[0;34m┃\033[1;37mDE CONEXIONES SIMULTANEAS DE USUARIOS? O DESEA   \033[0;34m┃"
echo -e "\033[0;34m┃\033[1;37mCREAR UNA NUEVA BASE ?                            \033[0;34m┃"
echo -e "\033[0;34m┠━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┨\033[0m"
echo -e "\033[0;34m┃\033[1;37m[\033[1;31m1\033[1;37m] \033[1;37mMANTER BASE DE DATO ACTUAL                  \033[0;34m┃"
echo -e "\033[0;34m┃\033[1;37m[\033[1;31m2\033[1;37m] \033[1;37mCREAR UNA NUEVA BASE DE DATOS                 \033[0;34m┃"
echo -e "\033[0;34m┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\033[0m"
echo ""
tput setaf 2 ; tput bold ; read -p "Opcion ?: " -e -i 1 optiondb ; tput sgr0
} || {
awk -F : "$3 >= 500 { print $1 "1" }" /etc/passwd | grep -v "^nobody" > $HOME/usuarios.db
}
[[ "$optiondb" = "2" ]] && awk -F : "$3 >= 500 { print $1 " 1" }" /etc/passwd | grep -v "^nobody" > $HOME/usuarios.db

# Redefinir a exibição do terminal
tput reset
## Exibir mensagem de espera com fundo azul e texto branco em negrito
echo -e "\E[38;5;92m╭━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╮\033[0m"
echo -e "\E[38;5;92m┃\E[44;1;37m            AGUARDE LA INSTALACION              \E[0m\E[38;5;92m┃"
echo -e "\E[38;5;92m╰━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╯\033[0m"
echo ""
echo -e "       \033[1;91m[\033[1;31m⚠️ \033[1;37m] \033[1;97mACTUALIZANDO SISTEMA \033[1;37m[\033[1;31m⚠️ \033[1;91m]\033[0m"
echo ""
echo -e "  \033[1;93mACTUALIZACIONES ACOSTUMBRAN DEMORAR UN POCO!\033[0m"
echo ""

# Definir a função de atualização do sistema
fun_attlist() {
    # Atualizar os pacotes do sistema
    apt-get update -y

    # Criar diretório oculto, se não existir
    if [[ ! -d /usr/share/.plus ]]; then
        mkdir /usr/share/.plus
    fi

    # Registrar a data da atualização
    echo "crz: $(date)" > /usr/share/.plus/.plus
}

# Executar a função de atualização do sistema com barra de progresso
fun_bar "fun_attlist"

# Redefinir a exibição do terminal
tput reset
# Exibir mensagem de espera com fundo azul e texto branco em negrito
echo -e "\E[38;5;92m╭━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╮\033[0m"
echo -e "\E[38;5;92m┃\E[44;1;37m            AGUARDE LA INSTALACION              \E[0m\E[38;5;92m┃"
echo -e "\E[38;5;92m╰━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╯\033[0m"
echo ""
echo -e "       \033[1;91m[\033[1;31m⚠️ \033[1;91m] \033[1;97mINSTALANDO PYTHON \033[1;91m[\033[1;31m⚠️ \033[1;91m] \033[0m"
echo ""
echo -e "        \033[1;93mACOSTUMBRA DEMORAR UN POCO!\033[0m"
echo ""
# Função para instalar Python3 baseado na versão do sistema
install_python3() {
    . /etc/os-release
    if { [[ "$ID" == "ubuntu" && "$VERSION_ID" == "20.04" ]] || [[ "$ID" == "debian" && "$VERSION_ID" == "11" ]]; }; then
        sudo apt-get install python3.8 -y >/dev/null 2>&1
        sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 1 >/dev/null 2>&1
        sudo update-alternatives --set python3 /usr/bin/python3.8 >/dev/null 2>&1
    elif { [[ "$ID" == "ubuntu" && "$VERSION_ID" == "22.04" ]] || [[ "$ID" == "debian" && "$VERSION_ID" == "12" ]]; }; then
        sudo apt-get install python3.10 -y >/dev/null 2>&1
        sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1 >/dev/null 2>&1
        sudo update-alternatives --set python3 /usr/bin/python3.10 >/dev/null 2>&1
    else
        echo -e "\033[1;31m[SISTEMA NO SUPORTADO] Solo Ubuntu 20.04, Ubuntu 22.04, Debian 11 e Debian 12 son compatibles.\033[0m"
        exit 1
    fi
    # INSTALA PIP
    apt install pip -y
    apt install pip3 -y
    apt install python3-pip -y
    # INSTALA SOCAT
    apt install socat -y
}

# Chama a função de instalação do Python3 com barra de progresso
fun_bar "install_python3"

# Redefinir a exibição do terminal
tput reset
# Exibir mensagem de espera com fundo azul e texto branco em negrito
echo -e "\E[38;5;92m╭━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╮\033[0m"
echo -e "\E[38;5;92m┃\E[44;1;37m            AGUARDE LA INSTALACION              \E[0m\E[38;5;92m┃"
echo -e "\E[38;5;92m╰━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╯\033[0m"
echo ""
echo -e "       \033[1;91m[\033[1;31m⚠️ \033[1;91m] \033[1;97mINSTALANDO PAQUETES  \033[1;91m[\033[1;31m⚠️ \033[1;91m] \033[0m"
echo ""
echo -e " \033[1;93mALGUNOS PAQUETES SON SUMAMENTE NECESARIOS!\033[0m"
echo ""
#!/bin/bash

# Função para instalar pacotes necessários
inst_pct() {
  if [[ $EUID -ne 0 ]]; then
    echo "Este script precisa ser ejecutado como root."
    exit 1
  fi

  _pacotes=("bc" "screen" "nano" "unzip" "lsof" "net-tools" "dos2unix" "nload" "jq" "curl" "figlet" "python3" "python3-pip" "firewalld")

  for _prog in "${_pacotes[@]}"; do
    if ! dpkg -l | grep -q "^ii  $_prog "; then
      echo "Instalando paquete: $_prog"
      apt install -y $_prog
    else
      echo "Paquete ya instalado: $_prog"
    fi
  done

  # Instalando o Speedtest-CLI
    echo -e "\e[1;32mINSTALANDO SPEEDTEST-CLI...\e[0m"
    pip3 install speedtest-cli || {
        echo -e "\e[1;31mFALLO AL INSTALAR SPEEDTEST-CLI\e[0m"
        exit 1
    }

  # Configurar regras do firewall
  sudo firewall-cmd --zone=public --permanent --add-port=80/tcp
  sudo firewall-cmd --zone=public --permanent --add-port=81/tcp
  sudo firewall-cmd --zone=public --permanent --add-port=443/tcp
  sudo firewall-cmd --zone=public --permanent --add-port=2053/tcp
  sudo firewall-cmd --zone=public --permanent --add-port=1194/tcp
  sudo firewall-cmd --zone=public --permanent --add-port=8080/tcp
  sudo firewall-cmd --zone=public --permanent --add-port=8989/tcp
  sudo firewall-cmd --zone=public --permanent --add-port=5454/tcp
  sudo firewall-cmd --zone=public --permanent --add-port=8888/tcp
  sudo firewall-cmd --zone=public --permanent --add-port=7300/udp
  sudo firewall-cmd --reload
}

fun_bar 'inst_pct'

# Configurar regras no UFW, se estiver instalado
if [[ -f "/usr/sbin/ufw" ]]; then
  ufw allow 443/tcp
  ufw allow 80/tcp
  ufw allow 3128/tcp
  ufw allow 8799/tcp
  ufw allow 8080/tcp
  echo "Configuraciones de UFW aplicadas."
fi

# Redefinir a exibição do terminal novamente
tput reset
# instalando rustyproxy by @UlekBR
bash <(wget -qO- https://raw.githubusercontent.com/PhoenixxZ2023/RustyProxyOnly/refs/heads/main/install.sh)

# Redefinir a exibição do terminal novamente
tput reset
# Instala ferramentas de rede
echo -e "\E[38;5;18m╭━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╮\033[0m"
echo -e "\E[38;5;18m┃\E[44;1;37m         INSTALANDO PAQUETES DE RED          \E[0m\E[38;5;18m┃"
echo -e "\E[38;5;18m╰━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╯\033[0m"
echo ""
fun_bar "sudo apt-get install -y lsof >/dev/null 2>&1"
fun_bar "sudo apt-get install -y htop >/dev/null 2>&1"
fun_bar "sudo apt-get install -y nload >/dev/null 2>&1"
fun_bar "sudo apt-get install -y zip >/dev/null 2>&1"
fun_bar "sudo apt-get install -y netcat >/dev/null 2>&1"

# Redefinir a exibição do terminal
tput reset
echo""

# Instalando DNS personalizados
echo -e         "\033[1;36mINSTALANDO DNS PERSONALIZADOS\033[0m"
echo ""

# Limpar as regras atuais do iptables antes de qualquer coisa
iptables -F

# Remover o link simbólico para /etc/resolv.conf (se existir)
sudo rm -f /etc/resolv.conf

# Criar um novo arquivo /etc/resolv.conf com os servidores DNS
echo -e 'nameserver 1.1.1.1\nnameserver 1.0.0.1\nnameserver 8.8.8.8\nnameserver 8.4.4.8\nnameserver 208.67.222.222\nnameserver 208.67.220.220' | sudo tee /etc/resolv.conf

# Proteger o arquivo /etc/resolv.conf para evitar alterações
sudo chattr +i /etc/resolv.conf

# Redefinir a exibição do terminal
tput reset
# Exibir a mensagem de finalização
echo -e "\E[38;5;18m╭━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╮\033[0m"
echo -e "\E[38;5;18m┃\E[44;1;37m         FINALIZANDO INSTALACION         \E[0m\E[38;5;18m┃"
echo -e "\E[38;5;18m╰━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╯\033[0m"
echo ""
echo -e "     \033[1;93mCONCLUYENDO FUNCIONES Y DEFINICIONES! \033[0m"
echo ""

# Executar a função fun_bar com argumentos
fun_bar "$_Ink/list $_lnk $_Ink $_1nk $key"

# Redefinir a exibição do terminal
tput reset
echo ""
cd $HOME
echo ""
echo -e "        \033[1;33m • \033[1;94mINSTALACION TERMINADA\033[1;33m • \033[0m"
echo ""

# Adicionar comandos ao .bashrc para exibição ao iniciar o terminal como root
{
    echo "clear"
    echo 'DATE=$(date +"%d-%m-%y")'
    
    echo 'figlet -k WEBCONT | lolcat'
    echo 'echo -e " NOMBRE DEL SERVIDOR : $HOSTNAME"'
    echo 'echo -e " DATA : $DATE"'
    echo 'echo -e " (TELEGRAM)--@NET_SATOSHI"'
    echo 'echo -e "\033[1;31m DIGITE ( menu ) PARA ENTRAR\033[0m."'
    echo 'echo -e ""'
} >> /root/.bashrc

# Exibir data e hora atual, nome do sistema, e mensagem de instalação concluída
date=$(date "+%Y-%m-%d <> %H:%M:%S")
echo -e "\033[1;37m $system         $date"
figlet "WEBCONT" | lolcat
echo -e "\033[01;31m\033[1;31m\033[5;34;47m                INSTALACION TERMINADA               \033[1;33m \033[0m\033[01;31m"
echo -e "\033[01;31m\033[1;33mPARA INICIAR DIGITE: \033[1;32mmenu\033[0m"
echo -e "\033[01;31m\033[1;33mMAS INFORMACIONES: \033[1;31m(\033[1;36mTELEGRAM\033[1;31m)--> \033[1;37m@NET_SATOSHI\033[0m"

# Define a função para exibir mensagens coloridas
color_text() {
  echo -e "\033[$1m$2\033[0m"
}

# Loop até receber uma resposta válida
while true; do
  echo
  # Mensagem em amarelo e negrito
  color_text "1;33" "SE RECOMIENDA REINICIAR EL SERVIDOR."
  color_text "1;33" "PARA QUE TODAS LOS SERVICIOS Y CONEXIONES FUNCIONEN PERFECTAMENTE..."
  color_text "1;33" "DESEA REINICIAR EL SERVIDOR AHORA? (s/n): "
  read -n 1 -r REPLY
  echo    # (opcional) move para a nova linha

  # Verifica a resposta
  if [[ $REPLY =~ ^[Ss]$ ]]; then
    color_text "1;32" "\nReiniciando el servidor..."
    sudo reboot
    break
  elif [[ $REPLY =~ ^[Nn]$ ]]; then
    color_text "1;31" "\nOpto por no reiniciar el servidor."
    break
  else
    color_text "1;31" "\nEntrada inválida. Por favor, responda con 's' o 'n'."
  fi
done

# Remover o diretório Plus do HOME e limpar o histórico do bash
rm -rf $HOME/Plus
cat /dev/null > ~/.bash_history
history -c
