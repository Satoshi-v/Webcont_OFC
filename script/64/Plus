#!/bin/bash
# Instalación silenciosa de paquetes
sudo apt-get install lolcat -y &>/dev/null 2>&1
sudo apt-get install toilet -y &>/dev/null 2>&1
sudo apt-get install curl -y &>/dev/null 2>&1
sudo apt-get install git -y &>/dev/null 2>&1 
sudo apt-get install figlet boxes -y &>/dev/null 2>&1 
sudo apt-get install net-tools -y &>/dev/null 2>&1
sudo apt-get install uuid-runtime -y >/dev/null 2>&1
sudo apt-get install python-minimal -y >/dev/null 2>&1
sudo apt-get install libpython-stdlib -y >/dev/null 2>&1
sudo apt-get install procps -y >/dev/null 2>&1
sudo apt-get install jq -y >/dev/null 2>&1

# Verificación si el usuario es root
cd $HOME
if [[ "$(whoami)" != "root" ]]; then
    echo -e "\033[1;33m[\033[1;31mError\033[1;33m] \033[1;37m- \033[1;33mDEBES EJECUTAR LA INSTALACIÓN DEL SCRIPT COMO USUARIO ROOT\033[0m"
    rm $HOME/Plus >/dev/null 2>&1
    exit 1
fi

# Decodificación de enlaces
_lnk=$(echo "z1:y#x.5s0ul&p4hs$s.0a72d*n-e!v89e032:3r" | sed -e "s/[^a-z.]//ig" | rev)
_Ink=$(echo "/3×u3#s87r/l32o4×c1a×l1/83×l24×i0b×" | sed -e "s/[^a-z/]//ig")
_1nk=$(echo "/3×u3#s×87r/83×l2×4×i0b×" | sed -e "s/[^a-z/]//ig")

# Función barra de progreso
fun_bar() {
    comando[0]="$1"
    comando[1]="$2"
    (
        [[ -e $HOME/fim ]] && rm $HOME/fim
        ${comando[0]} -y >/dev/null 2>&1
        ${comando[1]} -y >/dev/null 2>&1
        touch $HOME/fim
    ) >/dev/null 2>&1 &
    tput civis
    echo -ne    "\033[1;31m   ❪\033[1;33mESPERA \033[5;37m>\033[5;37m>\033[5;37m>\033[5;37m> \033[1;93m["
    while true; do
        for ((i = 0; i < 18; i++)); do
            echo -ne "\033[1;92m■"
            sleep 0.1s
        done
        [[ -e $HOME/fim ]] && rm $HOME/fim && break
        echo -e "\033[1;93m]"
        sleep 1s
        tput cuu1
        tput dl1
        echo -ne "\033[1;31m   ❪\033[1;33mESPERA \033[5;37m>\033[5;37m>\033[5;37m>\033[5;37m> \033[1;93m["
    done
    echo -e "\033[1;33m]\033[1;37m -\033[1;32m OK !\033[1;37m"
    tput cnorm
}

# --- CLAVE DE INSTALACIÓN DESACTIVADA ---
echo -e "\033[1;32m[✓] Modo sin clave activado. Continuando con la instalación...\033[0m"

# Redefinir la visualización del terminal
tput reset

# Mensaje de bienvenida
echo -e "\033[0;34m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\033[0m"
echo -e "\033[0;34m┃\E[41;1;37m               ⇱ SCRIPT SSHPLUS PRO ⇲             \E[0m\033[0;34m┃"
echo -e "\033[0;34m┠━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┨\033[0m"
echo -e "\033[0;34m┃                                                  \033[0;34m┃"  
echo -e "\033[0;34m┃     \033[1;31m¡ATENCIÓN! \033[1;37mESTE SCRIPT VA A:                   \033[0;34m┃"
echo -e "\033[0;34m┃                                                  \033[0;34m┃"
echo -e "\033[0;34m┃\033[1;32m• \033[1;37mINSTALAR UN CONJUNTO DE SCRIPTS COMO HERRAMIENTAS\033[0;34m┃"
echo -e "\033[0;34m┃\033[1;37m  PARA LA GESTIÓN DE RED, SISTEMA Y USUARIOS\033[0;34m┃"
echo -e "\033[0;34m┃                                                  \033[0;34m┃"
echo -e "\033[0;34m┃\033[1;32m• \033[1;32m¡CONSEJO! \033[1;37mUSA EL TEMA OSCURO EN TU TERMINAL PARA \033[0;34m┃"
echo -e "\033[0;34m┃\033[1;37m  UNA MEJOR EXPERIENCIA Y VISUALIZACIÓN DEL MISMO! \033[0;34m┃"
echo -e "\033[0;34m┃                                                  \033[0;34m┃"
echo -e "\033[0;34m┠━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┨\033[0m"
echo -e "\033[0;34m┃\033[1;37m               by:@TURBONET2023                   \E[0m\033[0;34m┃"
echo -e "\033[0;34m┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\033[0m"           
echo ""

# --- Descarga directa del archivo 'list' sin verificación ---
echo -e "\033[1;36m[✓] Descargando archivos necesarios...\033[0m"
rm -f $_Ink/list >/dev/null 2>&1
wget -P $_Ink https://raw.githubusercontent.com/Satoshi-V/Webcont_OFC/main/Install/list -O $_Ink/list >/dev/null 2>&1

# Verificación básica de que el archivo exista
if [[ ! -f "$_Ink/list" ]]; then
    echo -e "\033[1;31m[✘] Error: No se pudo descargar el archivo 'list'.\033[0m"
    exit 1
fi

sleep 3s

# Crear enlace al menú
echo "/bin/menu" >/bin/h && chmod +x /bin/h >/dev/null 2>&1

# Actualizar versión y otros archivos
rm versao* >/dev/null 2>&1
wget https://raw.githubusercontent.com/Satoshi-V/Webcont_OFC/main/Install/versao >/dev/null 2>&1

# Descargar v2raymanager y bot
cd /bin/ >/dev/null 2>&1
rm v2raymanager botteste.sh >/dev/null 2>&1
wget https://raw.githubusercontent.com/Satoshi-V/Webcont_OFC/main/Modulos/v2raymanager >/dev/null 2>&1
wget https://raw.githubusercontent.com/Satoshi-V/Webcont_OFC/main/Modulos/botteste.sh >/dev/null 2>&1
chmod 777 v2raymanager botteste.sh >/dev/null 2>&1

# Crear directorio y descargar ShellBot
mkdir $HOME/BOT >/dev/null 2>&1
cd $HOME/BOT
wget https://raw.githubusercontent.com/Satoshi-V/Webcont_OFC/main/Modulos/ShellBot.sh >/dev/null 2>&1
chmod 777 ShellBot.sh >/dev/null 2>&1
cd >/dev/null 2>&1

# Licencia y carpeta rec
mkdir /etc/rec >/dev/null 2>&1
cd /etc/rec
wget https://raw.githubusercontent.com/Satoshi-V/Webcont_OFC/main/Modulos/licence >/dev/null 2>&1
chmod 777 licence >/dev/null 2>&1
cd >/dev/null 2>&1

# Base de datos de usuarios
[[ -f "$HOME/usuarios.db" ]] && {
tput reset
echo -e "\033[0;34m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\033[0m"
echo -e "\033[0;34m┃                   \033[1;37m• \033[1;31m¡ATENCIÓN! \033[1;37m•                   \033[0;34m┃"
echo -e "\033[0;34m┠━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┨\033[0m"
echo -e "\033[0;34m┃\033[1;37mSE ENCONTRÓ UNA BASE DE DATOS DE USUARIO \033[1;32m(usuarios.db) \033[1;37m   \033[0;34m┃" 
echo -e "\033[0;34m┃\033[1;37m¿DESEAS MANTENERLA PRESERVANDO EL LÍMITE \033[0;34m┃"
echo -e "\033[0;34m┃\033[1;37mDE CONEXIONES SIMULTÁNEAS DE USUARIOS? O ¿DESEAS   \033[0;34m┃"
echo -e "\033[0;34m┃\033[1;37mCREAR UNA NUEVA BASE?                            \033[0;34m┃"
echo -e "\033[0;34m┠━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┨\033[0m"
echo -e "\033[0;34m┃\033[1;37m[\033[1;31m1\033[1;37m] \033[1;37mMANTENER BASE DE DATOS ACTUAL                  \033[0;34m┃"
echo -e "\033[0;34m┃\033[1;37m[\033[1;31m2\033[1;37m] \033[1;37mCREAR UNA NUEVA BASE DE DATOS                 \033[0;34m┃"
echo -e "\033[0;34m┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\033[0m"
echo ""
tput setaf 2 ; tput bold ; read -p "¿Opción?: " -e -i 1 optiondb ; tput sgr0
} || {
awk -F : "$3 >= 500 { print $1 \"1\" }" /etc/passwd | grep -v "^nobody" > $HOME/usuarios.db
}
[[ "$optiondb" = "2" ]] && awk -F : "$3 >= 500 { print $1 \" 1\" }" /etc/passwd | grep -v "^nobody" > $HOME/usuarios.db

# Redefinir terminal
tput reset

# Mensaje de actualización
echo -e "\E[38;5;92m╭━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╮\033[0m"
echo -e "\E[38;5;92m┃\E[44;1;37m            ESPERA LA INSTALACIÓN               \E[0m\E[38;5;92m┃"
echo -e "\E[38;5;92m╰━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╯\033[0m"
echo ""
echo -e "       \033[1;91m[\033[1;31m⚠️ \033[1;37m] \033[1;97mACTUALIZANDO SISTEMA \033[1;37m[\033[1;31m⚠️ \033[1;91m]\033[0m"
echo ""
echo -e "  \033[1;93m¡LAS ACTUALIZACIONES PUEDEN TARDAR UN POCO!\033[0m"
echo ""

fun_attlist() {
    apt-get update -y
    if [[ ! -d /usr/share/.plus ]]; then
        mkdir /usr/share/.plus
    fi
    echo "crz: $(date)" > /usr/share/.plus/.plus
}
fun_bar "fun_attlist"

# Instalación de Python
tput reset
echo -e "\E[38;5;92m╭━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╮\033[0m"
echo -e "\E[38;5;92m┃\E[44;1;37m            ESPERA LA INSTALACIÓN               \E[0m\E[38;5;92m┃"
echo -e "\E[38;5;92m╰━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╯\033[0m"
echo ""
echo -e "       \033[1;91m[\033[1;31m⚠️ \033[1;91m] \033[1;97mINSTALANDO PYTHON \033[1;91m[\033[1;31m⚠️ \033[1;91m] \033[0m"
echo ""
echo -e "        \033[1;93m¡PUEDE TARDAR UN POCO!\033[0m"
echo ""

install_python3() {
    . /etc/os-release
    if { [[ "$ID" == "ubuntu" && "$VERSION_ID" == "20.04" ]] || [[ "$ID" == "debian" && "$VERSION_ID" == "11" ]]; }; then
        sudo apt-get install python3.8 -y >/dev/null 2>&1
        sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 1 >/dev/null 2>&1
        sudo update-alternatives --set python3 /usr/bin/python3.8 >/dev/null 2>&1
    elif { [[ "$ID" == "ubuntu" && "$VERSION_ID" == "22.04" ]] || [[ "$ID" == "debian" && "$VERSION_ID" == "12" ]]; }; then
        sudo apt-get install python3.10 -y >/dev/null 2>&1
        sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1 >/dev/null 2>&1
        sudo update-alternatives --set python3 /usr/bin/python3.10 >/dev/null 2>&1
    else
        echo -e "\033[1;31m[¡SISTEMA NO SOPORTADO!] Solo Ubuntu 20.04, Ubuntu 22.04, Debian 11 y Debian 12 son compatibles.\033[0m"
        exit 1
    fi
    apt install pip -y
    apt install pip3 -y
    apt install python3-pip -y
    apt install socat -y
}
fun_bar "install_python3"

# Instalación de paquetes
tput reset
echo -e "\E[38;5;92m╭━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╮\033[0m"
echo -e "\E[38;5;92m┃\E[44;1;37m            ESPERA LA INSTALACIÓN               \E[0m\E[38;5;92m┃"
echo -e "\E[38;5;92m╰━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╯\033[0m"
echo ""
echo -e "       \033[1;91m[\033[1;31m⚠️ \033[1;91m] \033[1;97mINSTALANDO PAQUETES  \033[1;91m[\033[1;31m⚠️ \033[1;91m] \033[0m"
echo ""
echo -e " \033[1;93m¡ALGUNOS PAQUETES SON EXTREMADAMENTE NECESARIOS!\033[0m"
echo ""

inst_pct() {
  if [[ $EUID -ne 0 ]]; then
    echo "Este script debe ejecutarse como root."
    exit 1
  fi
  _pacotes=("bc" "screen" "nano" "unzip" "lsof" "net-tools" "dos2unix" "nload" "jq" "curl" "figlet" "python3" "python3-pip" "firewalld")
  for _prog in "${_pacotes[@]}"; do
    if ! dpkg -l | grep -q "^ii  $_prog "; then
      echo "Instalando paquete: $_prog"
      apt install -y $_prog
    else
      echo "Paquete ya instalado: $_prog"
    fi
  done
  pip3 install speedtest-cli || {
      echo -e "\e[1;31mFALLA AL INSTALAR SPEEDTEST-CLI\e[0m"
      exit 1
  }
  sudo firewall-cmd --zone=public --permanent --add-port=80/tcp
  sudo firewall-cmd --zone=public --permanent --add-port=81/tcp
  sudo firewall-cmd --zone=public --permanent --add-port=443/tcp
  sudo firewall-cmd --zone=public --permanent --add-port=2053/tcp
  sudo firewall-cmd --zone=public --permanent --add-port=1194/tcp
  sudo firewall-cmd --zone=public --permanent --add-port=8080/tcp
  sudo firewall-cmd --zone=public --permanent --add-port=8989/tcp
  sudo firewall-cmd --zone=public --permanent --add-port=5454/tcp
  sudo firewall-cmd --zone=public --permanent --add-port=8888/tcp
  sudo firewall-cmd --zone=public --permanent --add-port=7300/udp
  sudo firewall-cmd --reload
}
fun_bar 'inst_pct'

if [[ -f "/usr/sbin/ufw" ]]; then
  ufw allow 443/tcp
  ufw allow 80/tcp
  ufw allow 3128/tcp
  ufw allow 8799/tcp
  ufw allow 8080/tcp
  echo "Configuraciones de UFW aplicadas."
fi

# --- ✅ SE ELIMINÓ LA INSTALACIÓN DE RUSTYPROXY ---
echo -e "\033[1;32m[✓] Instalación de RustyProxy omitida.\033[0m"

# Instalar herramientas de red
tput reset
echo -e "\E[38;5;18m╭━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╮\033[0m"
echo -e "\E[38;5;18m┃\E[44;1;37m         INSTALANDO PAQUETES DE REDE          \E[0m\E[38;5;18m┃"
echo -e "\E[38;5;18m╰━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╯\033[0m"
echo ""
fun_bar "sudo apt-get install -y lsof >/dev/null 2>&1"
fun_bar "sudo apt-get install -y htop >/dev/null 2>&1"
fun_bar "sudo apt-get install -y nload >/dev/null 2>&1"
fun_bar "sudo apt-get install -y zip >/dev/null 2>&1"
fun_bar "sudo apt-get install -y netcat >/dev/null 2>&1"

# DNS personalizados
tput reset
echo -e "\033[1;36mINSTALANDO DNS PERSONALIZADOS\033[0m"
echo ""

# ⚠️ Evitar bloqueo del sistema
# iptables -F  # Comentado para evitar pérdida de conexión

echo -e 'nameserver 1.1.1.1
nameserver 1.0.0.1
nameserver 8.8.8.8
nameserver 8.4.4.8
nameserver 208.67.222.222
nameserver 208.67.220.220' | sudo tee /etc/resolv.conf

# ⚠️ Evitar chattr +i que puede causar problemas
# sudo chattr +i /etc/resolv.conf  # Eliminado

# Finalización
tput reset
echo -e "\E[38;5;18m╭━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╮\033[0m"
echo -e "\E[38;5;18m┃\E[44;1;37m         FINALIZANDO INSTALACIÓN          \E[0m\E[38;5;18m┃"
echo -e "\E[38;5;18m╰━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╯\033[0m"
echo ""
echo -e "     \033[1;93m¡CONCLUYENDO FUNCIONES Y DEFINICIONES! \033[0m"
echo ""

# Ejecutar list
fun_bar "$_Ink/list $_lnk $_Ink $_1nk"

# Configuración final
tput reset
cd $HOME
echo ""
echo -e "        \033[1;33m • \033[1;94mINSTALACIÓN CONCLUIDA\033[1;33m • \033[0m"
echo ""

{
    echo "clear"
    echo 'DATE=$(date +"%d-%m-%y")'
    echo 'TIME=$(date +"%T")'
    echo 'figlet -k SSH-PLUS | lolcat'
    echo 'echo -e " NOMBRE DEL SERVIDOR : $HOSTNAME"'
    echo 'echo -e " SERVIDOR ENCENDIDO DESDE : $(uptime -p)"'
    echo 'echo -e " FECHA : $DATE"'
    echo 'echo -e " HORA : $TIME"'
    echo 'echo -e " (TELEGRAM)--@TURBONET2023"'
    echo 'echo -e "\033[1;31m ESCRIBE ( menu ) PARA ENTRAR\033[0m."'
    echo 'echo -e ""'
} >> /root/.bashrc

# Mensaje final
date=$(date "+%Y-%m-%d <> %H:%M:%S")
echo -e "\033[1;37m $system         $date"
figlet "SSH-PLUS" | lolcat
echo -e "\033[01;31m\033[1;31m\033[5;34;47m                ¡INSTALACIÓN CONCLUIDA!               \033[1;33m \033[0m\033[01;31m"
echo -e "\033[01;31m\033[1;33mPARA INICIAR ESCRIBE: \033[1;32mmenu\033[0m"
echo -e "\033[01;31m\033[1;33mMÁS INFORMACIÓN: \033[1;31m(\033[1;36mTELEGRAM\033[1;31m)--> \033[1;37m@TURBONET2023\033[0m"

# Función de color
color_text() {
  echo -e "\033[$1m$2\033[0m"
}

# Preguntar si reiniciar
while true; do
  echo
  color_text "1;33" "SE RECOMIENDA REINICIAR EL SERVIDOR."
  color_text "1;33" "PARA QUE TODOS LOS SERVICIOS Y CONEXIONES FUNCIONEN PERFECTAMENTE..."
  color_text "1;33" "¿DESEAS REINICIAR EL SERVIDOR AHORA? (s/n): "
  read -n 1 -r REPLY
  echo
  if [[ $REPLY =~ ^[Ss]$ ]]; then
    color_text "1;32" "Reiniciando el servidor..."
    sudo reboot
    break
  elif [[ $REPLY =~ ^[Nn]$ ]]; then
    color_text "1;31" "Has optado por no reiniciar el servidor."
    break
  else
    color_text "1;31" "Entrada inválida. Por favor, responde con 's' o 'n'."
  fi
done

# Limpieza final
rm -rf $HOME/Plus
cat /dev/null > ~/.bash_history
history -c
